### YamlMime:JavaType
uid: "com.azure.compute.batch.BatchAsyncClient"
fullName: "com.azure.compute.batch.BatchAsyncClient"
name: "BatchAsyncClient"
nameWithType: "BatchAsyncClient"
summary: "Initializes a new instance of the asynchronous Batch<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **BatchAsyncClient**"
methods:
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeallocateNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeallocateNode(String poolId, String nodeId)"
  name: "beginDeallocateNode(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.beginDeallocateNode(String poolId, String nodeId)"
  summary: "Deallocates the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginDeallocateNode(String poolId, String nodeId)"
  desc: "Deallocates the specified Compute Node. You can deallocate a Compute Node only if it is in an idle or running state."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node reaches the <code>deallocated</code> state.\n It provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots during polling and returns the\n final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> once deallocation completes."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeallocateNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeDeallocateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeallocateNode(String poolId, String nodeId, BatchNodeDeallocateOptions options)"
  name: "beginDeallocateNode(String poolId, String nodeId, BatchNodeDeallocateOptions options)"
  nameWithType: "BatchAsyncClient.beginDeallocateNode(String poolId, String nodeId, BatchNodeDeallocateOptions options)"
  summary: "Deallocates the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Deallocate Node operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeDeallocateOptions?alt=com.azure.compute.batch.models.BatchNodeDeallocateOptions&text=BatchNodeDeallocateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginDeallocateNode(String poolId, String nodeId, BatchNodeDeallocateOptions options)"
  desc: "Deallocates the specified Compute Node. You can deallocate a Compute Node only if it is in an idle or running state."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node reaches the <code>deallocated</code> state.\n It provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots during polling and returns the\n final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> once deallocation completes."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteCertificate(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint)"
  name: "beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint)"
  nameWithType: "BatchAsyncClient.beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint)"
  summary: "Deletes a Certificate from the specified Account."
  parameters:
  - description: "The algorithm used to derive the thumbprint. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate to be deleted."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchCertificate,Void> beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint)"
  desc: "Deletes a Certificate from the specified Account. You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Certificate. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchCertificate\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteCertificate(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchCertificateDeleteOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateDeleteOptions options)"
  name: "beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateDeleteOptions options)"
  nameWithType: "BatchAsyncClient.beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateDeleteOptions options)"
  summary: "Deletes a Certificate from the specified Account."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate to be deleted."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Certificate operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificateDeleteOptions?alt=com.azure.compute.batch.models.BatchCertificateDeleteOptions&text=BatchCertificateDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchCertificate,Void> beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateDeleteOptions options)"
  desc: "Deletes a Certificate from the specified Account. You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Certificate. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchCertificate\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJob(String jobId)"
  name: "beginDeleteJob(String jobId)"
  nameWithType: "BatchAsyncClient.beginDeleteJob(String jobId)"
  summary: "Deletes a Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchJob,Void> beginDeleteJob(String jobId)"
  desc: "Deletes a Job. Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Job. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJob(java.lang.String,com.azure.compute.batch.models.BatchJobDeleteOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJob(String jobId, BatchJobDeleteOptions options, RequestConditions requestConditions)"
  name: "beginDeleteJob(String jobId, BatchJobDeleteOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginDeleteJob(String jobId, BatchJobDeleteOptions options, RequestConditions requestConditions)"
  summary: "Deletes a Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDeleteOptions?alt=com.azure.compute.batch.models.BatchJobDeleteOptions&text=BatchJobDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJob,Void> beginDeleteJob(String jobId, BatchJobDeleteOptions options, RequestConditions requestConditions)"
  desc: "Deletes a Job. Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Job. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJobSchedule(String jobScheduleId)"
  name: "beginDeleteJobSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.beginDeleteJobSchedule(String jobScheduleId)"
  summary: "Deletes a Job Schedule from the specified Account."
  parameters:
  - description: "The ID of the Job Schedule to delete."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchJobSchedule,Void> beginDeleteJobSchedule(String jobScheduleId)"
  desc: "Deletes a Job Schedule from the specified Account. When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Job Schedule. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleDeleteOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeleteJobSchedule(String jobScheduleId, BatchJobScheduleDeleteOptions options, RequestConditions requestConditions)"
  name: "beginDeleteJobSchedule(String jobScheduleId, BatchJobScheduleDeleteOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginDeleteJobSchedule(String jobScheduleId, BatchJobScheduleDeleteOptions options, RequestConditions requestConditions)"
  summary: "Deletes a Job Schedule from the specified Account."
  parameters:
  - description: "The ID of the Job Schedule to delete."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleDeleteOptions?alt=com.azure.compute.batch.models.BatchJobScheduleDeleteOptions&text=BatchJobScheduleDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJobSchedule,Void> beginDeleteJobSchedule(String jobScheduleId, BatchJobScheduleDeleteOptions options, RequestConditions requestConditions)"
  desc: "Deletes a Job Schedule from the specified Account. When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Job Schedule. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeletePool(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeletePool(String poolId)"
  name: "beginDeletePool(String poolId)"
  nameWithType: "BatchAsyncClient.beginDeletePool(String poolId)"
  summary: "Deletes a Pool from the specified Account."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchPool,Void> beginDeletePool(String poolId)"
  desc: "Deletes a Pool from the specified Account. When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Pool. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDeletePool(java.lang.String,com.azure.compute.batch.models.BatchPoolDeleteOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDeletePool(String poolId, BatchPoolDeleteOptions options, RequestConditions requestConditions)"
  name: "beginDeletePool(String poolId, BatchPoolDeleteOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginDeletePool(String poolId, BatchPoolDeleteOptions options, RequestConditions requestConditions)"
  summary: "Deletes a Pool from the specified Account."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Pool operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolDeleteOptions?alt=com.azure.compute.batch.models.BatchPoolDeleteOptions&text=BatchPoolDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,Void> beginDeletePool(String poolId, BatchPoolDeleteOptions options, RequestConditions requestConditions)"
  desc: "Deletes a Pool from the specified Account. When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the deletion of the Pool. The poller provides\n <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> instances during polling and returns <code>null</code> upon successful deletion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDisableJob(java.lang.String,com.azure.compute.batch.models.BatchJobDisableParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDisableJob(String jobId, BatchJobDisableParameters parameters)"
  name: "beginDisableJob(String jobId, BatchJobDisableParameters parameters)"
  nameWithType: "BatchAsyncClient.beginDisableJob(String jobId, BatchJobDisableParameters parameters)"
  summary: "Disables the specified Job, preventing new Tasks from running."
  parameters:
  - description: "The ID of the Job to disable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for disabling the Job."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDisableParameters?alt=com.azure.compute.batch.models.BatchJobDisableParameters&text=BatchJobDisableParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginDisableJob(String jobId, BatchJobDisableParameters parameters)"
  desc: "Disables the specified Job, preventing new Tasks from running. The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the disabling of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the final\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful disablement."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginDisableJob(java.lang.String,com.azure.compute.batch.models.BatchJobDisableParameters,com.azure.compute.batch.models.BatchJobDisableOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginDisableJob(String jobId, BatchJobDisableParameters parameters, BatchJobDisableOptions options, RequestConditions requestConditions)"
  name: "beginDisableJob(String jobId, BatchJobDisableParameters parameters, BatchJobDisableOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginDisableJob(String jobId, BatchJobDisableParameters parameters, BatchJobDisableOptions options, RequestConditions requestConditions)"
  summary: "Disables the specified Job, preventing new Tasks from running."
  parameters:
  - description: "The ID of the Job to disable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for disabling the Job."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDisableParameters?alt=com.azure.compute.batch.models.BatchJobDisableParameters&text=BatchJobDisableParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Disable Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDisableOptions?alt=com.azure.compute.batch.models.BatchJobDisableOptions&text=BatchJobDisableOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginDisableJob(String jobId, BatchJobDisableParameters parameters, BatchJobDisableOptions options, RequestConditions requestConditions)"
  desc: "Disables the specified Job, preventing new Tasks from running. The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the disabling of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the updated\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful transition to the active state."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginEnableJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginEnableJob(String jobId)"
  name: "beginEnableJob(String jobId)"
  nameWithType: "BatchAsyncClient.beginEnableJob(String jobId)"
  summary: "Enables the specified Job, allowing new Tasks to run."
  parameters:
  - description: "The ID of the Job to enable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginEnableJob(String jobId)"
  desc: "Enables the specified Job, allowing new Tasks to run. When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the enabling of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the final\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful transition to the active state."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginEnableJob(java.lang.String,com.azure.compute.batch.models.BatchJobEnableOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginEnableJob(String jobId, BatchJobEnableOptions options, RequestConditions requestConditions)"
  name: "beginEnableJob(String jobId, BatchJobEnableOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginEnableJob(String jobId, BatchJobEnableOptions options, RequestConditions requestConditions)"
  summary: "Enables the specified Job, allowing new Tasks to run."
  parameters:
  - description: "The ID of the Job to enable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Enable Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobEnableOptions?alt=com.azure.compute.batch.models.BatchJobEnableOptions&text=BatchJobEnableOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginEnableJob(String jobId, BatchJobEnableOptions options, RequestConditions requestConditions)"
  desc: "Enables the specified Job, allowing new Tasks to run. When you call this API, the Batch service sets a disabled Job to the enabling state. After this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the enabling of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the updated\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful transition to the active state."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginRebootNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginRebootNode(String poolId, String nodeId)"
  name: "beginRebootNode(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.beginRebootNode(String poolId, String nodeId)"
  summary: "Restarts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginRebootNode(String poolId, String nodeId)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node leaves <code>rebooting</code> and returns to\n <code>idle</code> / <code>running</code>. Provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while in progress\n and the final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> on completion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginRebootNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeRebootOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginRebootNode(String poolId, String nodeId, BatchNodeRebootOptions options)"
  name: "beginRebootNode(String poolId, String nodeId, BatchNodeRebootOptions options)"
  nameWithType: "BatchAsyncClient.beginRebootNode(String poolId, String nodeId, BatchNodeRebootOptions options)"
  summary: "Restarts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Reboot Node operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRebootOptions?alt=com.azure.compute.batch.models.BatchNodeRebootOptions&text=BatchNodeRebootOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginRebootNode(String poolId, String nodeId, BatchNodeRebootOptions options)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node leaves <code>rebooting</code> and returns to\n <code>idle</code> / <code>running</code>. Provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while in progress\n and the final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> on completion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginReimageNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginReimageNode(String poolId, String nodeId)"
  name: "beginReimageNode(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.beginReimageNode(String poolId, String nodeId)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginReimageNode(String poolId, String nodeId)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node leaves <code>reimaging</code>\n (or <code>starting</code>) and returns to <code>idle</code> / <code>running</code>.\n Provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while in progress and the final\n <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> on completion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginReimageNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeReimageOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginReimageNode(String poolId, String nodeId, BatchNodeReimageOptions options)"
  name: "beginReimageNode(String poolId, String nodeId, BatchNodeReimageOptions options)"
  nameWithType: "BatchAsyncClient.beginReimageNode(String poolId, String nodeId, BatchNodeReimageOptions options)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Reimage Node operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeReimageOptions?alt=com.azure.compute.batch.models.BatchNodeReimageOptions&text=BatchNodeReimageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginReimageNode(String poolId, String nodeId, BatchNodeReimageOptions options)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the node leaves <code>reimaging</code>\n (or <code>starting</code>) and returns to <code>idle</code> / <code>running</code>.\n Provides <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while in progress and the final\n <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> on completion."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginRemoveNodes(java.lang.String,com.azure.compute.batch.models.BatchNodeRemoveParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters)"
  name: "beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters)"
  nameWithType: "BatchAsyncClient.beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters)"
  summary: "Removes Compute Nodes from the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for removing the node."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoveParameters?alt=com.azure.compute.batch.models.BatchNodeRemoveParameters&text=BatchNodeRemoveParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters)"
  desc: "Removes Compute Nodes from the specified Pool. This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the pool\\u2019s <code>allocationState</code>\n becomes <code>steady</code>. Provides <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> snapshots while\n in progress and the final <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> on completion\n (or <code>null</code> if the pool has been deleted)."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginRemoveNodes(java.lang.String,com.azure.compute.batch.models.BatchNodeRemoveParameters,com.azure.compute.batch.models.BatchNodesRemoveOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters, BatchNodesRemoveOptions options, RequestConditions requestConditions)"
  name: "beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters, BatchNodesRemoveOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters, BatchNodesRemoveOptions options, RequestConditions requestConditions)"
  summary: "Removes Compute Nodes from the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for removing the node."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoveParameters?alt=com.azure.compute.batch.models.BatchNodeRemoveParameters&text=BatchNodeRemoveParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Remove Nodes operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodesRemoveOptions?alt=com.azure.compute.batch.models.BatchNodesRemoveOptions&text=BatchNodesRemoveOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters, BatchNodesRemoveOptions options, RequestConditions requestConditions)"
  desc: "Removes Compute Nodes from the specified Pool. This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls until the pool\\u2019s <code>allocationState</code>\n becomes <code>steady</code>. Provides <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> snapshots while\n in progress and the final <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> on completion\n (or <code>null</code> if the pool has been deleted)."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginResizePool(java.lang.String,com.azure.compute.batch.models.BatchPoolResizeParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginResizePool(String poolId, BatchPoolResizeParameters parameters)"
  name: "beginResizePool(String poolId, BatchPoolResizeParameters parameters)"
  nameWithType: "BatchAsyncClient.beginResizePool(String poolId, BatchPoolResizeParameters parameters)"
  summary: "Changes the number of Compute Nodes that are assigned to a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for resizing the pool."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeParameters?alt=com.azure.compute.batch.models.BatchPoolResizeParameters&text=BatchPoolResizeParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginResizePool(String poolId, BatchPoolResizeParameters parameters)"
  desc: "Changes the number of Compute Nodes that are assigned to a Pool. You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the resize operation, providing <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref>\n snapshots while in progress and the final snapshot when resizing completes."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginResizePool(java.lang.String,com.azure.compute.batch.models.BatchPoolResizeParameters,com.azure.compute.batch.models.BatchPoolResizeOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginResizePool(String poolId, BatchPoolResizeParameters parameters, BatchPoolResizeOptions options, RequestConditions requestConditions)"
  name: "beginResizePool(String poolId, BatchPoolResizeParameters parameters, BatchPoolResizeOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginResizePool(String poolId, BatchPoolResizeParameters parameters, BatchPoolResizeOptions options, RequestConditions requestConditions)"
  summary: "Changes the number of Compute Nodes that are assigned to a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for resizing the pool."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeParameters?alt=com.azure.compute.batch.models.BatchPoolResizeParameters&text=BatchPoolResizeParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Resize Pool operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeOptions?alt=com.azure.compute.batch.models.BatchPoolResizeOptions&text=BatchPoolResizeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginResizePool(String poolId, BatchPoolResizeParameters parameters, BatchPoolResizeOptions options, RequestConditions requestConditions)"
  desc: "Changes the number of Compute Nodes that are assigned to a Pool. You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the resize operation, providing <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref>\n snapshots while in progress and the final snapshot when resizing completes."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginStartNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginStartNode(String poolId, String nodeId)"
  name: "beginStartNode(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.beginStartNode(String poolId, String nodeId)"
  summary: "Starts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginStartNode(String poolId, String nodeId)"
  desc: "Starts the specified Compute Node. You can start a Compute Node only if it has been deallocated."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the start operation, returning <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while\n in progress and the final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> when the node reaches <code>idle</code>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginStartNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeStartOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginStartNode(String poolId, String nodeId, BatchNodeStartOptions options)"
  name: "beginStartNode(String poolId, String nodeId, BatchNodeStartOptions options)"
  nameWithType: "BatchAsyncClient.beginStartNode(String poolId, String nodeId, BatchNodeStartOptions options)"
  summary: "Starts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Start Node operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeStartOptions?alt=com.azure.compute.batch.models.BatchNodeStartOptions&text=BatchNodeStartOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchNode,BatchNode> beginStartNode(String poolId, String nodeId, BatchNodeStartOptions options)"
  desc: "Starts the specified Compute Node. You can start a Compute Node only if it has been deallocated."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the start operation, returning <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> snapshots while\n in progress and the final <xref uid=\"com.azure.compute.batch.models.BatchNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchNode\"></xref> when the node reaches <code>idle</code>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginStopPoolResize(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginStopPoolResize(String poolId)"
  name: "beginStopPoolResize(String poolId)"
  nameWithType: "BatchAsyncClient.beginStopPoolResize(String poolId)"
  summary: "Stops an ongoing resize operation on the Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginStopPoolResize(String poolId)"
  desc: "Stops an ongoing resize operation on the Pool. This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> providing <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> snapshots while polling\n and the final <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> (or <code>null</code>) when complete."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginStopPoolResize(java.lang.String,com.azure.compute.batch.models.BatchPoolResizeStopOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginStopPoolResize(String poolId, BatchPoolResizeStopOptions options, RequestConditions requestConditions)"
  name: "beginStopPoolResize(String poolId, BatchPoolResizeStopOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginStopPoolResize(String poolId, BatchPoolResizeStopOptions options, RequestConditions requestConditions)"
  summary: "Stops an ongoing resize operation on the Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Stop Pool Resize operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeStopOptions?alt=com.azure.compute.batch.models.BatchPoolResizeStopOptions&text=BatchPoolResizeStopOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchPool,BatchPool> beginStopPoolResize(String poolId, BatchPoolResizeStopOptions options, RequestConditions requestConditions)"
  desc: "Stops an ongoing resize operation on the Pool. This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> providing <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> snapshots while polling\n and the final <xref uid=\"com.azure.compute.batch.models.BatchPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchPool\"></xref> (or <code>null</code>) when complete."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJob(String jobId)"
  name: "beginTerminateJob(String jobId)"
  nameWithType: "BatchAsyncClient.beginTerminateJob(String jobId)"
  summary: "Terminates the specified Job, marking it as completed."
  parameters:
  - description: "The ID of the Job to terminate."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginTerminateJob(String jobId)"
  desc: "Terminates the specified Job, marking it as completed. When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the termination of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the final\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful termination."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJob(java.lang.String,com.azure.compute.batch.models.BatchJobTerminateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJob(String jobId, BatchJobTerminateOptions options, RequestConditions requestConditions)"
  name: "beginTerminateJob(String jobId, BatchJobTerminateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginTerminateJob(String jobId, BatchJobTerminateOptions options, RequestConditions requestConditions)"
  summary: "Terminates the specified Job, marking it as completed."
  parameters:
  - description: "The ID of the Job to terminate."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Terminate Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobTerminateOptions?alt=com.azure.compute.batch.models.BatchJobTerminateOptions&text=BatchJobTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJob,BatchJob> beginTerminateJob(String jobId, BatchJobTerminateOptions options, RequestConditions requestConditions)"
  desc: "Terminates the specified Job, marking it as completed. When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the termination of the Job.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> instances during polling and returns the updated\n <xref uid=\"com.azure.compute.batch.models.BatchJob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJob\"></xref> upon successful termination."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJobSchedule(String jobScheduleId)"
  name: "beginTerminateJobSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.beginTerminateJobSchedule(String jobScheduleId)"
  summary: "Terminates a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to terminates."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchJobSchedule,BatchJobSchedule> beginTerminateJobSchedule(String jobScheduleId)"
  desc: "Terminates a Job Schedule."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the termination of the Job Schedule.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> instances during polling and returns the final\n <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> upon successful termination."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleTerminateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.beginTerminateJobSchedule(String jobScheduleId, BatchJobScheduleTerminateOptions options, RequestConditions requestConditions)"
  name: "beginTerminateJobSchedule(String jobScheduleId, BatchJobScheduleTerminateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.beginTerminateJobSchedule(String jobScheduleId, BatchJobScheduleTerminateOptions options, RequestConditions requestConditions)"
  summary: "Terminates a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to terminates."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Terminate Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleTerminateOptions?alt=com.azure.compute.batch.models.BatchJobScheduleTerminateOptions&text=BatchJobScheduleTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BatchJobSchedule,BatchJobSchedule> beginTerminateJobSchedule(String jobScheduleId, BatchJobScheduleTerminateOptions options, RequestConditions requestConditions)"
  desc: "Terminates a Job Schedule."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the termination of the Job Schedule.\n The poller provides <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> instances during polling and returns the updated\n <xref uid=\"com.azure.compute.batch.models.BatchJobSchedule\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchJobSchedule\"></xref> upon successful termination."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletion(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint)"
  name: "cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint)"
  nameWithType: "BatchAsyncClient.cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint)"
  summary: "Cancels a failed deletion of a Certificate from the specified Account."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate being deleted."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint)"
  desc: "Cancels a failed deletion of a Certificate from the specified Account. If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletion(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchCertificateCancelDeletionOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint, BatchCertificateCancelDeletionOptions options)"
  name: "cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint, BatchCertificateCancelDeletionOptions options)"
  nameWithType: "BatchAsyncClient.cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint, BatchCertificateCancelDeletionOptions options)"
  summary: "Cancels a failed deletion of a Certificate from the specified Account."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate being deleted."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Cancel Certificate Deletion operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificateCancelDeletionOptions?alt=com.azure.compute.batch.models.BatchCertificateCancelDeletionOptions&text=BatchCertificateCancelDeletionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint, BatchCertificateCancelDeletionOptions options)"
  desc: "Cancels a failed deletion of a Certificate from the specified Account. If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletionWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.cancelCertificateDeletionWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  name: "cancelCertificateDeletionWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.cancelCertificateDeletionWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  summary: "Cancels a failed deletion of a Certificate from the specified Account."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate being deleted."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> cancelCertificateDeletionWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  desc: "Cancels a failed deletion of a Certificate from the specified Account. If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createCertificate(com.azure.compute.batch.models.BatchCertificate)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createCertificate(BatchCertificate certificate)"
  name: "createCertificate(BatchCertificate certificate)"
  nameWithType: "BatchAsyncClient.createCertificate(BatchCertificate certificate)"
  summary: "Creates a Certificate to the specified Account."
  parameters:
  - description: "The Certificate to be created."
    name: "certificate"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createCertificate(BatchCertificate certificate)"
  desc: "Creates a Certificate to the specified Account."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createCertificate(com.azure.compute.batch.models.BatchCertificate,com.azure.compute.batch.models.BatchCertificateCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createCertificate(BatchCertificate certificate, BatchCertificateCreateOptions options)"
  name: "createCertificate(BatchCertificate certificate, BatchCertificateCreateOptions options)"
  nameWithType: "BatchAsyncClient.createCertificate(BatchCertificate certificate, BatchCertificateCreateOptions options)"
  summary: "Creates a Certificate to the specified Account."
  parameters:
  - description: "The Certificate to be created."
    name: "certificate"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Certificate operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificateCreateOptions?alt=com.azure.compute.batch.models.BatchCertificateCreateOptions&text=BatchCertificateCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createCertificate(BatchCertificate certificate, BatchCertificateCreateOptions options)"
  desc: "Creates a Certificate to the specified Account."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createCertificateWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createCertificateWithResponse(BinaryData certificate, RequestOptions requestOptions)"
  name: "createCertificateWithResponse(BinaryData certificate, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createCertificateWithResponse(BinaryData certificate, RequestOptions requestOptions)"
  summary: "Creates a Certificate to the specified Account."
  parameters:
  - description: "The Certificate to be created."
    name: "certificate"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createCertificateWithResponse(BinaryData certificate, RequestOptions requestOptions)"
  desc: "Creates a Certificate to the specified Account.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     thumbprint: String (Required)\n     thumbprintAlgorithm: String (Required)\n     url: String (Optional)\n     state: String(active/deleting/deletefailed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/deleting/deletefailed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     publicData: String (Optional)\n     deleteCertificateError (Optional): {\n         code: String (Optional)\n         message: String (Optional)\n         values (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n     data: byte[] (Required)\n     certificateFormat: String(pfx/cer) (Optional)\n     password: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJob(com.azure.compute.batch.models.BatchJobCreateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJob(BatchJobCreateParameters job)"
  name: "createJob(BatchJobCreateParameters job)"
  nameWithType: "BatchAsyncClient.createJob(BatchJobCreateParameters job)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobCreateParameters?alt=com.azure.compute.batch.models.BatchJobCreateParameters&text=BatchJobCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createJob(BatchJobCreateParameters job)"
  desc: "Creates a Job to the specified Account. The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJob(com.azure.compute.batch.models.BatchJobCreateParameters,com.azure.compute.batch.models.BatchJobCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJob(BatchJobCreateParameters job, BatchJobCreateOptions options)"
  name: "createJob(BatchJobCreateParameters job, BatchJobCreateOptions options)"
  nameWithType: "BatchAsyncClient.createJob(BatchJobCreateParameters job, BatchJobCreateOptions options)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobCreateParameters?alt=com.azure.compute.batch.models.BatchJobCreateParameters&text=BatchJobCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobCreateOptions?alt=com.azure.compute.batch.models.BatchJobCreateOptions&text=BatchJobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createJob(BatchJobCreateParameters job, BatchJobCreateOptions options)"
  desc: "Creates a Job to the specified Account. The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJobSchedule(com.azure.compute.batch.models.BatchJobScheduleCreateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJobSchedule(BatchJobScheduleCreateParameters jobSchedule)"
  name: "createJobSchedule(BatchJobScheduleCreateParameters jobSchedule)"
  nameWithType: "BatchAsyncClient.createJobSchedule(BatchJobScheduleCreateParameters jobSchedule)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleCreateParameters?alt=com.azure.compute.batch.models.BatchJobScheduleCreateParameters&text=BatchJobScheduleCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createJobSchedule(BatchJobScheduleCreateParameters jobSchedule)"
  desc: "Creates a Job Schedule to the specified Account."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJobSchedule(com.azure.compute.batch.models.BatchJobScheduleCreateParameters,com.azure.compute.batch.models.BatchJobScheduleCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJobSchedule(BatchJobScheduleCreateParameters jobSchedule, BatchJobScheduleCreateOptions options)"
  name: "createJobSchedule(BatchJobScheduleCreateParameters jobSchedule, BatchJobScheduleCreateOptions options)"
  nameWithType: "BatchAsyncClient.createJobSchedule(BatchJobScheduleCreateParameters jobSchedule, BatchJobScheduleCreateOptions options)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleCreateParameters?alt=com.azure.compute.batch.models.BatchJobScheduleCreateParameters&text=BatchJobScheduleCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleCreateOptions?alt=com.azure.compute.batch.models.BatchJobScheduleCreateOptions&text=BatchJobScheduleCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createJobSchedule(BatchJobScheduleCreateParameters jobSchedule, BatchJobScheduleCreateOptions options)"
  desc: "Creates a Job Schedule to the specified Account."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJobScheduleWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Creates a Job Schedule to the specified Account.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     schedule (Required): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n             skipWithdrawFromVNet: Boolean (Optional)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                             sharedGalleryImageId: String (Optional)\n                             communityGalleryImageId: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: Integer (Optional)\n                             managedDisk (Optional): {\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                                 securityProfile (Optional): {\n                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                                 }\n                             }\n                             writeAcceleratorEnabled: Boolean (Optional)\n                         }\n                         securityProfile (Optional): {\n                             encryptionAtHost: Boolean (Optional)\n                             securityType: String(trustedLaunch/confidentialVM) (Optional)\n                             uefiSettings (Optional): {\n                                 secureBootEnabled: Boolean (Optional)\n                                 vTpmEnabled: Boolean (Optional)\n                             }\n                         }\n                         serviceArtifactReference (Optional): {\n                             id: String (Required)\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     resourceTags: String (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     certificateReferences (Optional): [\n                          (Optional){\n                             thumbprint: String (Required)\n                             thumbprintAlgorithm: String (Required)\n                             storeLocation: String(currentuser/localmachine) (Optional)\n                             storeName: String (Optional)\n                             visibility (Optional): [\n                                 String(starttask/task/remoteuser) (Optional)\n                             ]\n                         }\n                     ]\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 accountKey: String (Required)\n                                 azureFileUrl: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                     upgradePolicy (Optional): {\n                         mode: String(automatic/manual/rolling) (Required)\n                         automaticOSUpgradePolicy (Optional): {\n                             disableAutomaticRollback: Boolean (Optional)\n                             enableAutomaticOSUpgrade: Boolean (Optional)\n                             useRollingUpgradePolicy: Boolean (Optional)\n                             osRollingUpgradeDeferral: Boolean (Optional)\n                         }\n                         rollingUpgradePolicy (Optional): {\n                             enableCrossZoneUpgrade: Boolean (Optional)\n                             maxBatchInstancePercent: Integer (Optional)\n                             maxUnhealthyInstancePercent: Integer (Optional)\n                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                             pauseTimeBetweenBatches: Duration (Optional)\n                             prioritizeUnhealthyInstances: Boolean (Optional)\n                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                         }\n                     }\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createJobWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  name: "createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  desc: "Creates a Job to the specified Account. The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createNodeUser(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserCreateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user)"
  name: "createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user)"
  nameWithType: "BatchAsyncClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "user"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserCreateParameters?alt=com.azure.compute.batch.models.BatchNodeUserCreateParameters&text=BatchNodeUserCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createNodeUser(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserCreateParameters,com.azure.compute.batch.models.BatchNodeUserCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user, BatchNodeUserCreateOptions options)"
  name: "createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user, BatchNodeUserCreateOptions options)"
  nameWithType: "BatchAsyncClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user, BatchNodeUserCreateOptions options)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "user"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserCreateParameters?alt=com.azure.compute.batch.models.BatchNodeUserCreateParameters&text=BatchNodeUserCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Node User operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserCreateOptions?alt=com.azure.compute.batch.models.BatchNodeUserCreateOptions&text=BatchNodeUserCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user, BatchNodeUserCreateOptions options)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createNodeUserWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  name: "createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "user"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     name: String (Required)\n     isAdmin: Boolean (Optional)\n     expiryTime: OffsetDateTime (Optional)\n     password: String (Optional)\n     sshPublicKey: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createPool(com.azure.compute.batch.models.BatchPoolCreateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createPool(BatchPoolCreateParameters pool)"
  name: "createPool(BatchPoolCreateParameters pool)"
  nameWithType: "BatchAsyncClient.createPool(BatchPoolCreateParameters pool)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolCreateParameters?alt=com.azure.compute.batch.models.BatchPoolCreateParameters&text=BatchPoolCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createPool(BatchPoolCreateParameters pool)"
  desc: "Creates a Pool to the specified Account. When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createPool(com.azure.compute.batch.models.BatchPoolCreateParameters,com.azure.compute.batch.models.BatchPoolCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createPool(BatchPoolCreateParameters pool, BatchPoolCreateOptions options)"
  name: "createPool(BatchPoolCreateParameters pool, BatchPoolCreateOptions options)"
  nameWithType: "BatchAsyncClient.createPool(BatchPoolCreateParameters pool, BatchPoolCreateOptions options)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolCreateParameters?alt=com.azure.compute.batch.models.BatchPoolCreateParameters&text=BatchPoolCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Pool operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolCreateOptions?alt=com.azure.compute.batch.models.BatchPoolCreateOptions&text=BatchPoolCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createPool(BatchPoolCreateParameters pool, BatchPoolCreateOptions options)"
  desc: "Creates a Pool to the specified Account. When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createPoolWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  name: "createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  desc: "Creates a Pool to the specified Account. When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     vmSize: String (Required)\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                  (Optional){\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Required)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Required)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n             caching: String(none/readonly/readwrite) (Optional)\n             diskSizeGB: Integer (Optional)\n             managedDisk (Optional): {\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                 securityProfile (Optional): {\n                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                 }\n             }\n             writeAcceleratorEnabled: Boolean (Optional)\n         }\n         securityProfile (Optional): {\n             encryptionAtHost: Boolean (Optional)\n             securityType: String(trustedLaunch/confidentialVM) (Optional)\n             uefiSettings (Optional): {\n                 secureBootEnabled: Boolean (Optional)\n                 vTpmEnabled: Boolean (Optional)\n             }\n         }\n         serviceArtifactReference (Optional): {\n             id: String (Required)\n         }\n     }\n     resizeTimeout: Duration (Optional)\n     resourceTags (Optional): {\n         String: String (Required)\n     }\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     enableAutoScale: Boolean (Optional)\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n     enableInterNodeCommunication: Boolean (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): (recursive schema, see registry above)\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 accountKey: String (Required)\n                 azureFileUrl: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     upgradePolicy (Optional): {\n         mode: String(automatic/manual/rolling) (Required)\n         automaticOSUpgradePolicy (Optional): {\n             disableAutomaticRollback: Boolean (Optional)\n             enableAutomaticOSUpgrade: Boolean (Optional)\n             useRollingUpgradePolicy: Boolean (Optional)\n             osRollingUpgradeDeferral: Boolean (Optional)\n         }\n         rollingUpgradePolicy (Optional): {\n             enableCrossZoneUpgrade: Boolean (Optional)\n             maxBatchInstancePercent: Integer (Optional)\n             maxUnhealthyInstancePercent: Integer (Optional)\n             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n             pauseTimeBetweenBatches: Duration (Optional)\n             prioritizeUnhealthyInstances: Boolean (Optional)\n             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTask(java.lang.String,com.azure.compute.batch.models.BatchTaskCreateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTask(String jobId, BatchTaskCreateParameters task)"
  name: "createTask(String jobId, BatchTaskCreateParameters task)"
  nameWithType: "BatchAsyncClient.createTask(String jobId, BatchTaskCreateParameters task)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "task"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCreateParameters?alt=com.azure.compute.batch.models.BatchTaskCreateParameters&text=BatchTaskCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createTask(String jobId, BatchTaskCreateParameters task)"
  desc: "Creates a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTask(java.lang.String,com.azure.compute.batch.models.BatchTaskCreateParameters,com.azure.compute.batch.models.BatchTaskCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTask(String jobId, BatchTaskCreateParameters task, BatchTaskCreateOptions options)"
  name: "createTask(String jobId, BatchTaskCreateParameters task, BatchTaskCreateOptions options)"
  nameWithType: "BatchAsyncClient.createTask(String jobId, BatchTaskCreateParameters task, BatchTaskCreateOptions options)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "task"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCreateParameters?alt=com.azure.compute.batch.models.BatchTaskCreateParameters&text=BatchTaskCreateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCreateOptions?alt=com.azure.compute.batch.models.BatchTaskCreateOptions&text=BatchTaskCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createTask(String jobId, BatchTaskCreateParameters task, BatchTaskCreateOptions options)"
  desc: "Creates a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTaskCollection(java.lang.String,com.azure.compute.batch.models.BatchTaskGroup)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTaskCollection(String jobId, BatchTaskGroup taskCollection)"
  name: "createTaskCollection(String jobId, BatchTaskGroup taskCollection)"
  nameWithType: "BatchAsyncClient.createTaskCollection(String jobId, BatchTaskGroup taskCollection)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "taskCollection"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskGroup?alt=com.azure.compute.batch.models.BatchTaskGroup&text=BatchTaskGroup\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchCreateTaskCollectionResult> createTaskCollection(String jobId, BatchTaskGroup taskCollection)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the result of creating a collection of Tasks to a Job on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchCreateTaskCollectionResult?alt=com.azure.compute.batch.models.BatchCreateTaskCollectionResult&text=BatchCreateTaskCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTaskCollection(java.lang.String,com.azure.compute.batch.models.BatchTaskGroup,com.azure.compute.batch.models.BatchTaskCollectionCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTaskCollection(String jobId, BatchTaskGroup taskCollection, BatchTaskCollectionCreateOptions options)"
  name: "createTaskCollection(String jobId, BatchTaskGroup taskCollection, BatchTaskCollectionCreateOptions options)"
  nameWithType: "BatchAsyncClient.createTaskCollection(String jobId, BatchTaskGroup taskCollection, BatchTaskCollectionCreateOptions options)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "taskCollection"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskGroup?alt=com.azure.compute.batch.models.BatchTaskGroup&text=BatchTaskGroup\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Create Task Collection operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCollectionCreateOptions?alt=com.azure.compute.batch.models.BatchTaskCollectionCreateOptions&text=BatchTaskCollectionCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchCreateTaskCollectionResult> createTaskCollection(String jobId, BatchTaskGroup taskCollection, BatchTaskCollectionCreateOptions options)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the result of creating a collection of Tasks to a Job on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchCreateTaskCollectionResult?alt=com.azure.compute.batch.models.BatchCreateTaskCollectionResult&text=BatchCreateTaskCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTaskCollectionWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  name: "createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "taskCollection"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             id: String (Required)\n             displayName: String (Optional)\n             exitConditions (Optional): {\n                 exitCodes (Optional): [\n                      (Optional){\n                         code: int (Required)\n                         exitOptions (Required): {\n                             jobAction: String(none/disable/terminate) (Optional)\n                             dependencyAction: String(satisfy/block) (Optional)\n                         }\n                     }\n                 ]\n                 exitCodeRanges (Optional): [\n                      (Optional){\n                         start: int (Required)\n                         end: int (Required)\n                         exitOptions (Required): (recursive schema, see exitOptions above)\n                     }\n                 ]\n                 preProcessingError (Optional): (recursive schema, see preProcessingError above)\n                 fileUploadError (Optional): (recursive schema, see fileUploadError above)\n                 default (Optional): (recursive schema, see default above)\n             }\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             affinityInfo (Optional): {\n                 affinityId: String (Required)\n             }\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             multiInstanceSettings (Optional): {\n                 numberOfInstances: Integer (Optional)\n                 coordinationCommandLine: String (Required)\n                 commonResourceFiles (Optional): [\n                     (recursive schema, see above)\n                 ]\n             }\n             dependsOn (Optional): {\n                 taskIds (Optional): [\n                     String (Optional)\n                 ]\n                 taskIdRanges (Optional): [\n                      (Optional){\n                         start: int (Required)\n                         end: int (Required)\n                     }\n                 ]\n             }\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n          (Optional){\n             status: String(success/clienterror/servererror) (Required)\n             taskId: String (Required)\n             eTag: String (Optional)\n             lastModified: OffsetDateTime (Optional)\n             location: String (Optional)\n             error (Optional): {\n                 code: String (Optional)\n                 message (Optional): {\n                     lang: String (Optional)\n                     value: String (Optional)\n                 }\n                 values (Optional): [\n                      (Optional){\n                         key: String (Optional)\n                         value: String (Optional)\n                     }\n                 ]\n             }\n         }\n     ]\n }\n```"
  returns:
    description: "the result of creating a collection of Tasks to a Job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTasks(java.lang.String,java.util.Collection<com.azure.compute.batch.models.BatchTaskCreateParameters>,com.azure.compute.batch.models.BatchTaskBulkCreateOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList, BatchTaskBulkCreateOptions batchTaskBulkCreateOptions)"
  name: "createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList, BatchTaskBulkCreateOptions batchTaskBulkCreateOptions)"
  nameWithType: "BatchAsyncClient.createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList, BatchTaskBulkCreateOptions batchTaskBulkCreateOptions)"
  summary: "Creates a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the job to which to add the task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of <xref uid=\"com.azure.compute.batch.models.BatchTaskCreateParameters\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tasks\"></xref> to add."
    name: "taskList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html\">Collection</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCreateParameters?alt=com.azure.compute.batch.models.BatchTaskCreateParameters&text=BatchTaskCreateParameters\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameters for Create Tasks operation."
    name: "batchTaskBulkCreateOptions"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskBulkCreateOptions?alt=com.azure.compute.batch.models.BatchTaskBulkCreateOptions&text=BatchTaskBulkCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList, BatchTaskBulkCreateOptions batchTaskBulkCreateOptions)"
  desc: "Creates a collection of Tasks to the specified Job.\n\nNote that each Task must have a unique ID.This method can work with multiple threads. The parallel degree can be specified by the user. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTasks(java.lang.String,java.util.List<com.azure.compute.batch.models.BatchTaskCreateParameters>)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTasks(String jobId, List<BatchTaskCreateParameters> taskList)"
  name: "createTasks(String jobId, List<BatchTaskCreateParameters> taskList)"
  nameWithType: "BatchAsyncClient.createTasks(String jobId, List<BatchTaskCreateParameters> taskList)"
  summary: "Adds multiple tasks to a job."
  parameters:
  - description: "The ID of the job to which to add the task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of <xref uid=\"com.azure.compute.batch.models.BatchTaskCreateParameters\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tasks\"></xref> to add."
    name: "taskList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCreateParameters?alt=com.azure.compute.batch.models.BatchTaskCreateParameters&text=BatchTaskCreateParameters\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> createTasks(String jobId, List<BatchTaskCreateParameters> taskList)"
  desc: "Adds multiple tasks to a job."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.createTaskWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  name: "createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "task"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  desc: "Creates a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     commandLine: String (Required)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         containerHostBatchBindMounts (Optional): [\n              (Optional){\n                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                 isReadOnly: Boolean (Optional)\n             }\n         ]\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFile(String poolId, String nodeId, String filePath)"
  name: "deleteNodeFile(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchAsyncClient.deleteNodeFile(String poolId, String nodeId, String filePath)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteNodeFile(String poolId, String nodeId, String filePath)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeFileDeleteOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileDeleteOptions options)"
  name: "deleteNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileDeleteOptions options)"
  nameWithType: "BatchAsyncClient.deleteNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileDeleteOptions options)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Node File operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeFileDeleteOptions?alt=com.azure.compute.batch.models.BatchNodeFileDeleteOptions&text=BatchNodeFileDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileDeleteOptions options)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Deletes the specified file from the Compute Node.\n\n**Query Parameters**\n\n    | --------- | -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name      | Type     | Required | Description                                                                                                                                                                                                                                                                                       |\n    | timeOut   | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".                                                                                                                     |\n    | recursive | Boolean  | No       | Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUser(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUser(String poolId, String nodeId, String userName)"
  name: "deleteNodeUser(String poolId, String nodeId, String userName)"
  nameWithType: "BatchAsyncClient.deleteNodeUser(String poolId, String nodeId, String userName)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteNodeUser(String poolId, String nodeId, String userName)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserDeleteOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUser(String poolId, String nodeId, String userName, BatchNodeUserDeleteOptions options)"
  name: "deleteNodeUser(String poolId, String nodeId, String userName, BatchNodeUserDeleteOptions options)"
  nameWithType: "BatchAsyncClient.deleteNodeUser(String poolId, String nodeId, String userName, BatchNodeUserDeleteOptions options)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Node User operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserDeleteOptions?alt=com.azure.compute.batch.models.BatchNodeUserDeleteOptions&text=BatchNodeUserDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteNodeUser(String poolId, String nodeId, String userName, BatchNodeUserDeleteOptions options)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUserWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  name: "deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTask(String jobId, String taskId)"
  name: "deleteTask(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.deleteTask(String jobId, String taskId)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTask(String jobId, String taskId)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskDeleteOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTask(String jobId, String taskId, BatchTaskDeleteOptions options, RequestConditions requestConditions)"
  name: "deleteTask(String jobId, String taskId, BatchTaskDeleteOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.deleteTask(String jobId, String taskId, BatchTaskDeleteOptions options, RequestConditions requestConditions)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskDeleteOptions?alt=com.azure.compute.batch.models.BatchTaskDeleteOptions&text=BatchTaskDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteTask(String jobId, String taskId, BatchTaskDeleteOptions options, RequestConditions requestConditions)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFile(String jobId, String taskId, String filePath)"
  name: "deleteTaskFile(String jobId, String taskId, String filePath)"
  nameWithType: "BatchAsyncClient.deleteTaskFile(String jobId, String taskId, String filePath)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTaskFile(String jobId, String taskId, String filePath)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskFileDeleteOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFile(String jobId, String taskId, String filePath, BatchTaskFileDeleteOptions options)"
  name: "deleteTaskFile(String jobId, String taskId, String filePath, BatchTaskFileDeleteOptions options)"
  nameWithType: "BatchAsyncClient.deleteTaskFile(String jobId, String taskId, String filePath, BatchTaskFileDeleteOptions options)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Delete Task File operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskFileDeleteOptions?alt=com.azure.compute.batch.models.BatchTaskFileDeleteOptions&text=BatchTaskFileDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteTaskFile(String jobId, String taskId, String filePath, BatchTaskFileDeleteOptions options)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran.\n\n**Query Parameters**\n\n    | --------- | -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name      | Type     | Required | Description                                                                                                                                                                                                                                                                                       |\n    | timeOut   | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".                                                                                                                     |\n    | recursive | Boolean  | No       | Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.deleteTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableJobSchedule(String jobScheduleId)"
  name: "disableJobSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.disableJobSchedule(String jobScheduleId)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> disableJobSchedule(String jobScheduleId)"
  desc: "Disables a Job Schedule. No new Jobs will be created until the Job Schedule is enabled again."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleDisableOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableJobSchedule(String jobScheduleId, BatchJobScheduleDisableOptions options, RequestConditions requestConditions)"
  name: "disableJobSchedule(String jobScheduleId, BatchJobScheduleDisableOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.disableJobSchedule(String jobScheduleId, BatchJobScheduleDisableOptions options, RequestConditions requestConditions)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Disable Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleDisableOptions?alt=com.azure.compute.batch.models.BatchJobScheduleDisableOptions&text=BatchJobScheduleDisableOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> disableJobSchedule(String jobScheduleId, BatchJobScheduleDisableOptions options, RequestConditions requestConditions)"
  desc: "Disables a Job Schedule. No new Jobs will be created until the Job Schedule is enabled again."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Disables a Job Schedule. No new Jobs will be created until the Job Schedule is enabled again.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableNodeScheduling(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableNodeScheduling(String poolId, String nodeId)"
  name: "disableNodeScheduling(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.disableNodeScheduling(String poolId, String nodeId)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> disableNodeScheduling(String poolId, String nodeId)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableNodeScheduling(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeSchedulingDisableOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingDisableOptions options)"
  name: "disableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingDisableOptions options)"
  nameWithType: "BatchAsyncClient.disableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingDisableOptions options)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Disable Node Scheduling operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeSchedulingDisableOptions?alt=com.azure.compute.batch.models.BatchNodeSchedulingDisableOptions&text=BatchNodeSchedulingDisableOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> disableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingDisableOptions options)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disableNodeSchedulingWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------ | ------ | -------- | ---------------------------------------------------------------------------- |\n    | Name         | Type   | Required | Description                                                                  |\n    | Content-Type | String | No       | The content type. Allowed values: \"application/json; odata=minimalmetadata\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     nodeDisableSchedulingOption: String(requeue/terminate/taskcompletion) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScale(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScale(String poolId)"
  name: "disablePoolAutoScale(String poolId)"
  nameWithType: "BatchAsyncClient.disablePoolAutoScale(String poolId)"
  summary: "Disables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> disablePoolAutoScale(String poolId)"
  desc: "Disables automatic scaling for a Pool."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolDisableAutoScaleOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScale(String poolId, BatchPoolDisableAutoScaleOptions options)"
  name: "disablePoolAutoScale(String poolId, BatchPoolDisableAutoScaleOptions options)"
  nameWithType: "BatchAsyncClient.disablePoolAutoScale(String poolId, BatchPoolDisableAutoScaleOptions options)"
  summary: "Disables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Disable Pool AutoScale operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolDisableAutoScaleOptions?alt=com.azure.compute.batch.models.BatchPoolDisableAutoScaleOptions&text=BatchPoolDisableAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> disablePoolAutoScale(String poolId, BatchPoolDisableAutoScaleOptions options)"
  desc: "Disables automatic scaling for a Pool."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScaleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  name: "disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Disables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Disables automatic scaling for a Pool.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableJobSchedule(String jobScheduleId)"
  name: "enableJobSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.enableJobSchedule(String jobScheduleId)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> enableJobSchedule(String jobScheduleId)"
  desc: "Enables a Job Schedule."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleEnableOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableJobSchedule(String jobScheduleId, BatchJobScheduleEnableOptions options, RequestConditions requestConditions)"
  name: "enableJobSchedule(String jobScheduleId, BatchJobScheduleEnableOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.enableJobSchedule(String jobScheduleId, BatchJobScheduleEnableOptions options, RequestConditions requestConditions)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Enable Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleEnableOptions?alt=com.azure.compute.batch.models.BatchJobScheduleEnableOptions&text=BatchJobScheduleEnableOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> enableJobSchedule(String jobScheduleId, BatchJobScheduleEnableOptions options, RequestConditions requestConditions)"
  desc: "Enables a Job Schedule."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Enables a Job Schedule.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableNodeScheduling(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableNodeScheduling(String poolId, String nodeId)"
  name: "enableNodeScheduling(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.enableNodeScheduling(String poolId, String nodeId)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> enableNodeScheduling(String poolId, String nodeId)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableNodeScheduling(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeSchedulingEnableOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingEnableOptions options)"
  name: "enableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingEnableOptions options)"
  nameWithType: "BatchAsyncClient.enableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingEnableOptions options)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Enable Node Scheduling operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeSchedulingEnableOptions?alt=com.azure.compute.batch.models.BatchNodeSchedulingEnableOptions&text=BatchNodeSchedulingEnableOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> enableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingEnableOptions options)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enableNodeSchedulingWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters)"
  name: "enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters)"
  nameWithType: "BatchAsyncClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters)"
  summary: "Enables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters?alt=com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters&text=BatchPoolEnableAutoScaleParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters)"
  desc: "Enables automatic scaling for a Pool. You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters,com.azure.compute.batch.models.BatchPoolEnableAutoScaleOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters, BatchPoolEnableAutoScaleOptions options, RequestConditions requestConditions)"
  name: "enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters, BatchPoolEnableAutoScaleOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters, BatchPoolEnableAutoScaleOptions options, RequestConditions requestConditions)"
  summary: "Enables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters?alt=com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters&text=BatchPoolEnableAutoScaleParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Enable Pool AutoScale operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEnableAutoScaleOptions?alt=com.azure.compute.batch.models.BatchPoolEnableAutoScaleOptions&text=BatchPoolEnableAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters, BatchPoolEnableAutoScaleOptions options, RequestConditions requestConditions)"
  desc: "Enables automatic scaling for a Pool. You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScaleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Enables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Enables automatic scaling for a Pool. You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters)"
  name: "evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters)"
  nameWithType: "BatchAsyncClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters?alt=com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters&text=BatchPoolEvaluateAutoScaleParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AutoScaleRun> evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula."
  returns:
    description: "the result of evaluating an automatic scaling formula on the Pool.\n\n This API is primarily for validating an autoscale formula, as it simply returns\n the result without applying the formula to the Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.AutoScaleRun?alt=com.azure.compute.batch.models.AutoScaleRun&text=AutoScaleRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters,com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters, BatchPoolEvaluateAutoScaleOptions options)"
  name: "evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters, BatchPoolEvaluateAutoScaleOptions options)"
  nameWithType: "BatchAsyncClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters, BatchPoolEvaluateAutoScaleOptions options)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters?alt=com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters&text=BatchPoolEvaluateAutoScaleParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Evaluate Pool AutoScale operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleOptions?alt=com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleOptions&text=BatchPoolEvaluateAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AutoScaleRun> evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters, BatchPoolEvaluateAutoScaleOptions options)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula."
  returns:
    description: "the result of evaluating an automatic scaling formula on the Pool.\n\n This API is primarily for validating an autoscale formula, as it simply returns\n the result without applying the formula to the Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.AutoScaleRun?alt=com.azure.compute.batch.models.AutoScaleRun&text=AutoScaleRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScaleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     autoScaleFormula: String (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     timestamp: OffsetDateTime (Required)\n     results: String (Optional)\n     error (Optional): {\n         code: String (Optional)\n         message: String (Optional)\n         values (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "the result of evaluating an automatic scaling formula on the Pool.\n\n This API is primarily for validating an autoscale formula, as it simply returns\n the result without applying the formula to the Pool along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getApplication(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getApplication(String applicationId)"
  name: "getApplication(String applicationId)"
  nameWithType: "BatchAsyncClient.getApplication(String applicationId)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchApplication> getApplication(String applicationId)"
  desc: "Gets information about the specified Application. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "information about the specified Application.\n\n This operation returns only Applications and versions that are available for\n use on Compute Nodes; that is, that can be used in an Package reference on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getApplication(java.lang.String,com.azure.compute.batch.models.BatchApplicationGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getApplication(String applicationId, BatchApplicationGetOptions options)"
  name: "getApplication(String applicationId, BatchApplicationGetOptions options)"
  nameWithType: "BatchAsyncClient.getApplication(String applicationId, BatchApplicationGetOptions options)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Application operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchApplicationGetOptions?alt=com.azure.compute.batch.models.BatchApplicationGetOptions&text=BatchApplicationGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchApplication> getApplication(String applicationId, BatchApplicationGetOptions options)"
  desc: "Gets information about the specified Application. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "information about the specified Application.\n\n This operation returns only Applications and versions that are available for\n use on Compute Nodes; that is, that can be used in an Package reference on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getApplicationWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  name: "getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Application. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Required)\n     versions (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "information about the specified Application.\n\n This operation returns only Applications and versions that are available for\n use on Compute Nodes; that is, that can be used in an Package reference along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getCertificate(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getCertificate(String thumbprintAlgorithm, String thumbprint)"
  name: "getCertificate(String thumbprintAlgorithm, String thumbprint)"
  nameWithType: "BatchAsyncClient.getCertificate(String thumbprintAlgorithm, String thumbprint)"
  summary: "Gets information about the specified Certificate."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate to get."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchCertificate> getCertificate(String thumbprintAlgorithm, String thumbprint)"
  desc: "Gets information about the specified Certificate."
  returns:
    description: "information about the specified Certificate on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getCertificate(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchCertificateGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateGetOptions options)"
  name: "getCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateGetOptions options)"
  nameWithType: "BatchAsyncClient.getCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateGetOptions options)"
  summary: "Gets information about the specified Certificate."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate to get."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Certificate operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificateGetOptions?alt=com.azure.compute.batch.models.BatchCertificateGetOptions&text=BatchCertificateGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchCertificate> getCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateGetOptions options)"
  desc: "Gets information about the specified Certificate."
  returns:
    description: "information about the specified Certificate on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getCertificateWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getCertificateWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  name: "getCertificateWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getCertificateWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  summary: "Gets information about the specified Certificate."
  parameters:
  - description: "The algorithm used to derive the thumbprint parameter. This must be sha1."
    name: "thumbprintAlgorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The thumbprint of the Certificate to get."
    name: "thumbprint"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getCertificateWithResponse(String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions)"
  desc: "Gets information about the specified Certificate.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     thumbprint: String (Required)\n     thumbprintAlgorithm: String (Required)\n     url: String (Optional)\n     state: String(active/deleting/deletefailed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/deleting/deletefailed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     publicData: String (Optional)\n     deleteCertificateError (Optional): {\n         code: String (Optional)\n         message: String (Optional)\n         values (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n     data: byte[] (Required)\n     certificateFormat: String(pfx/cer) (Optional)\n     password: String (Optional)\n }\n```"
  returns:
    description: "information about the specified Certificate along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJob(String jobId)"
  name: "getJob(String jobId)"
  nameWithType: "BatchAsyncClient.getJob(String jobId)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchJob> getJob(String jobId)"
  desc: "Gets information about the specified Job."
  returns:
    description: "information about the specified Job on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJob(java.lang.String,com.azure.compute.batch.models.BatchJobGetOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJob(String jobId, BatchJobGetOptions options, RequestConditions requestConditions)"
  name: "getJob(String jobId, BatchJobGetOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.getJob(String jobId, BatchJobGetOptions options, RequestConditions requestConditions)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobGetOptions?alt=com.azure.compute.batch.models.BatchJobGetOptions&text=BatchJobGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchJob> getJob(String jobId, BatchJobGetOptions options, RequestConditions requestConditions)"
  desc: "Gets information about the specified Job."
  returns:
    description: "information about the specified Job on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobSchedule(String jobScheduleId)"
  name: "getJobSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.getJobSchedule(String jobScheduleId)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchJobSchedule> getJobSchedule(String jobScheduleId)"
  desc: "Gets information about the specified Job Schedule."
  returns:
    description: "information about the specified Job Schedule on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleGetOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobSchedule(String jobScheduleId, BatchJobScheduleGetOptions options, RequestConditions requestConditions)"
  name: "getJobSchedule(String jobScheduleId, BatchJobScheduleGetOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.getJobSchedule(String jobScheduleId, BatchJobScheduleGetOptions options, RequestConditions requestConditions)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleGetOptions?alt=com.azure.compute.batch.models.BatchJobScheduleGetOptions&text=BatchJobScheduleGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchJobSchedule> getJobSchedule(String jobScheduleId, BatchJobScheduleGetOptions options, RequestConditions requestConditions)"
  desc: "Gets information about the specified Job Schedule."
  returns:
    description: "information about the specified Job Schedule on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Job Schedule.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/completed/disabled/terminating/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/completed/disabled/terminating/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     schedule (Optional): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n             skipWithdrawFromVNet: Boolean (Optional)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                             sharedGalleryImageId: String (Optional)\n                             communityGalleryImageId: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: Integer (Optional)\n                             managedDisk (Optional): {\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                                 securityProfile (Optional): {\n                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                                 }\n                             }\n                             writeAcceleratorEnabled: Boolean (Optional)\n                         }\n                         securityProfile (Optional): {\n                             encryptionAtHost: Boolean (Optional)\n                             securityType: String(trustedLaunch/confidentialVM) (Optional)\n                             uefiSettings (Optional): {\n                                 secureBootEnabled: Boolean (Optional)\n                                 vTpmEnabled: Boolean (Optional)\n                             }\n                         }\n                         serviceArtifactReference (Optional): {\n                             id: String (Required)\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     resourceTags: String (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     certificateReferences (Optional): [\n                          (Optional){\n                             thumbprint: String (Required)\n                             thumbprintAlgorithm: String (Required)\n                             storeLocation: String(currentuser/localmachine) (Optional)\n                             storeName: String (Optional)\n                             visibility (Optional): [\n                                 String(starttask/task/remoteuser) (Optional)\n                             ]\n                         }\n                     ]\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 accountKey: String (Required)\n                                 azureFileUrl: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                     upgradePolicy (Optional): {\n                         mode: String(automatic/manual/rolling) (Required)\n                         automaticOSUpgradePolicy (Optional): {\n                             disableAutomaticRollback: Boolean (Optional)\n                             enableAutomaticOSUpgrade: Boolean (Optional)\n                             useRollingUpgradePolicy: Boolean (Optional)\n                             osRollingUpgradeDeferral: Boolean (Optional)\n                         }\n                         rollingUpgradePolicy (Optional): {\n                             enableCrossZoneUpgrade: Boolean (Optional)\n                             maxBatchInstancePercent: Integer (Optional)\n                             maxUnhealthyInstancePercent: Integer (Optional)\n                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                             pauseTimeBetweenBatches: Duration (Optional)\n                             prioritizeUnhealthyInstances: Boolean (Optional)\n                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                         }\n                     }\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     executionInfo (Optional): {\n         nextRunTime: OffsetDateTime (Optional)\n         recentJob (Optional): {\n             id: String (Optional)\n             url: String (Optional)\n         }\n         endTime: OffsetDateTime (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "information about the specified Job Schedule along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCounts(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCounts(String jobId)"
  name: "getJobTaskCounts(String jobId)"
  nameWithType: "BatchAsyncClient.getJobTaskCounts(String jobId)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchTaskCountsResult> getJobTaskCounts(String jobId)"
  desc: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query."
  returns:
    description: "the Task counts for the specified Job.\n\n Task counts provide a count of the Tasks by active, running or completed Task\n state, and a count of Tasks which succeeded or failed on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCountsResult?alt=com.azure.compute.batch.models.BatchTaskCountsResult&text=BatchTaskCountsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCounts(java.lang.String,com.azure.compute.batch.models.BatchJobTaskCountsGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCounts(String jobId, BatchJobTaskCountsGetOptions options)"
  name: "getJobTaskCounts(String jobId, BatchJobTaskCountsGetOptions options)"
  nameWithType: "BatchAsyncClient.getJobTaskCounts(String jobId, BatchJobTaskCountsGetOptions options)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Job Task Counts operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobTaskCountsGetOptions?alt=com.azure.compute.batch.models.BatchJobTaskCountsGetOptions&text=BatchJobTaskCountsGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchTaskCountsResult> getJobTaskCounts(String jobId, BatchJobTaskCountsGetOptions options)"
  desc: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query."
  returns:
    description: "the Task counts for the specified Job.\n\n Task counts provide a count of the Tasks by active, running or completed Task\n state, and a count of Tasks which succeeded or failed on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCountsResult?alt=com.azure.compute.batch.models.BatchTaskCountsResult&text=BatchTaskCountsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCountsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     taskCounts (Required): {\n         active: int (Required)\n         running: int (Required)\n         completed: int (Required)\n         succeeded: int (Required)\n         failed: int (Required)\n     }\n     taskSlotCounts (Required): {\n         active: int (Required)\n         running: int (Required)\n         completed: int (Required)\n         succeeded: int (Required)\n         failed: int (Required)\n     }\n }\n```"
  returns:
    description: "the Task counts for the specified Job.\n\n Task counts provide a count of the Tasks by active, running or completed Task\n state, and a count of Tasks which succeeded or failed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Job.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "information about the specified Job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNode(String poolId, String nodeId)"
  name: "getNode(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.getNode(String poolId, String nodeId)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchNode> getNode(String poolId, String nodeId)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "information about the specified Compute Node on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNode(String poolId, String nodeId, BatchNodeGetOptions options)"
  name: "getNode(String poolId, String nodeId, BatchNodeGetOptions options)"
  nameWithType: "BatchAsyncClient.getNode(String poolId, String nodeId, BatchNodeGetOptions options)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Node operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeGetOptions?alt=com.azure.compute.batch.models.BatchNodeGetOptions&text=BatchNodeGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchNode> getNode(String poolId, String nodeId, BatchNodeGetOptions options)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "information about the specified Compute Node on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeExtension(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeExtension(String poolId, String nodeId, String extensionName)"
  name: "getNodeExtension(String poolId, String nodeId, String extensionName)"
  nameWithType: "BatchAsyncClient.getNodeExtension(String poolId, String nodeId, String extensionName)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchNodeVMExtension> getNodeExtension(String poolId, String nodeId, String extensionName)"
  desc: "Gets information about the specified Compute Node Extension."
  returns:
    description: "information about the specified Compute Node Extension on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeExtension(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeExtensionGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeExtension(String poolId, String nodeId, String extensionName, BatchNodeExtensionGetOptions options)"
  name: "getNodeExtension(String poolId, String nodeId, String extensionName, BatchNodeExtensionGetOptions options)"
  nameWithType: "BatchAsyncClient.getNodeExtension(String poolId, String nodeId, String extensionName, BatchNodeExtensionGetOptions options)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Node Extension operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeExtensionGetOptions?alt=com.azure.compute.batch.models.BatchNodeExtensionGetOptions&text=BatchNodeExtensionGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchNodeVMExtension> getNodeExtension(String poolId, String nodeId, String extensionName, BatchNodeExtensionGetOptions options)"
  desc: "Gets information about the specified Compute Node Extension."
  returns:
    description: "information about the specified Compute Node Extension on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeExtensionWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  name: "getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  desc: "Gets information about the specified Compute Node Extension.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     provisioningState: String (Optional)\n     vmExtension (Optional): {\n         name: String (Required)\n         publisher: String (Required)\n         type: String (Required)\n         typeHandlerVersion: String (Optional)\n         autoUpgradeMinorVersion: Boolean (Optional)\n         enableAutomaticUpgrade: Boolean (Optional)\n         settings (Optional): {\n             String: String (Required)\n         }\n         protectedSettings (Optional): {\n             String: String (Required)\n         }\n         provisionAfterExtensions (Optional): [\n             String (Optional)\n         ]\n     }\n     instanceView (Optional): {\n         name: String (Optional)\n         statuses (Optional): [\n              (Optional){\n                 code: String (Optional)\n                 displayStatus: String (Optional)\n                 level: String(Error/Info/Warning) (Optional)\n                 message: String (Optional)\n                 time: OffsetDateTime (Optional)\n             }\n         ]\n         subStatuses (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n }\n```"
  returns:
    description: "information about the specified Compute Node Extension along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFile(String poolId, String nodeId, String filePath)"
  name: "getNodeFile(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchAsyncClient.getNodeFile(String poolId, String nodeId, String filePath)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BinaryData> getNodeFile(String poolId, String nodeId, String filePath)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeFileGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileGetOptions options)"
  name: "getNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileGetOptions options)"
  nameWithType: "BatchAsyncClient.getNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileGetOptions options)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Node File operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeFileGetOptions?alt=com.azure.compute.batch.models.BatchNodeFileGetOptions&text=BatchNodeFileGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileGetOptions options)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFileProperties(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFileProperties(String poolId, String nodeId, String filePath)"
  name: "getNodeFileProperties(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchAsyncClient.getNodeFileProperties(String poolId, String nodeId, String filePath)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchFileProperties> getNodeFileProperties(String poolId, String nodeId, String filePath)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the properties of the specified Compute Node file on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchFileProperties?alt=com.azure.compute.batch.models.BatchFileProperties&text=BatchFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFileProperties(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeFilePropertiesGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFileProperties(String poolId, String nodeId, String filePath, BatchNodeFilePropertiesGetOptions options)"
  name: "getNodeFileProperties(String poolId, String nodeId, String filePath, BatchNodeFilePropertiesGetOptions options)"
  nameWithType: "BatchAsyncClient.getNodeFileProperties(String poolId, String nodeId, String filePath, BatchNodeFilePropertiesGetOptions options)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Node File Properties operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeFilePropertiesGetOptions?alt=com.azure.compute.batch.models.BatchNodeFilePropertiesGetOptions&text=BatchNodeFilePropertiesGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchFileProperties> getNodeFileProperties(String poolId, String nodeId, String filePath, BatchNodeFilePropertiesGetOptions options)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the properties of the specified Compute Node file on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchFileProperties?alt=com.azure.compute.batch.models.BatchFileProperties&text=BatchFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFilePropertiesWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Gets the properties of the specified Compute Node file.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the properties of the specified Compute Node file along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Returns the content of the specified Compute Node file.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n    | ocp-range           | String         | No       | The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.                                                                                   |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nBinaryData\n```"
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettings(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettings(String poolId, String nodeId)"
  name: "getNodeRemoteLoginSettings(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.getNodeRemoteLoginSettings(String poolId, String nodeId)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchNodeRemoteLoginSettings> getNodeRemoteLoginSettings(String poolId, String nodeId)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node."
  returns:
    description: "the settings required for remote login to a Compute Node.\n\n Before you can remotely login to a Compute Node using the remote login settings,\n you must create a user Account on the Compute Node on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeRemoteLoginSettings?alt=com.azure.compute.batch.models.BatchNodeRemoteLoginSettings&text=BatchNodeRemoteLoginSettings\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettings(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettings(String poolId, String nodeId, BatchNodeRemoteLoginSettingsGetOptions options)"
  name: "getNodeRemoteLoginSettings(String poolId, String nodeId, BatchNodeRemoteLoginSettingsGetOptions options)"
  nameWithType: "BatchAsyncClient.getNodeRemoteLoginSettings(String poolId, String nodeId, BatchNodeRemoteLoginSettingsGetOptions options)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Node Remote Login Settings operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsGetOptions?alt=com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsGetOptions&text=BatchNodeRemoteLoginSettingsGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchNodeRemoteLoginSettings> getNodeRemoteLoginSettings(String poolId, String nodeId, BatchNodeRemoteLoginSettingsGetOptions options)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node."
  returns:
    description: "the settings required for remote login to a Compute Node.\n\n Before you can remotely login to a Compute Node using the remote login settings,\n you must create a user Account on the Compute Node on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeRemoteLoginSettings?alt=com.azure.compute.batch.models.BatchNodeRemoteLoginSettings&text=BatchNodeRemoteLoginSettings\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettingsWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     remoteLoginIPAddress: String (Required)\n     remoteLoginPort: int (Required)\n }\n```"
  returns:
    description: "the settings required for remote login to a Compute Node.\n\n Before you can remotely login to a Compute Node using the remote login settings,\n you must create a user Account on the Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getNodeWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Compute Node.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     url: String (Optional)\n     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted/upgradingos/deallocated/deallocating) (Optional)\n     schedulingState: String(enabled/disabled) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     lastBootTime: OffsetDateTime (Optional)\n     allocationTime: OffsetDateTime (Optional)\n     ipAddress: String (Optional)\n     affinityId: String (Optional)\n     vmSize: String (Optional)\n     totalTasksRun: Integer (Optional)\n     runningTasksCount: Integer (Optional)\n     runningTaskSlotsCount: Integer (Optional)\n     totalTasksSucceeded: Integer (Optional)\n     recentTasks (Optional): [\n          (Optional){\n             taskUrl: String (Optional)\n             jobId: String (Optional)\n             taskId: String (Optional)\n             subtaskId: Integer (Optional)\n             taskState: String(active/preparing/running/completed) (Required)\n             executionInfo (Optional): {\n                 startTime: OffsetDateTime (Optional)\n                 endTime: OffsetDateTime (Optional)\n                 exitCode: Integer (Optional)\n                 containerInfo (Optional): {\n                     containerId: String (Optional)\n                     state: String (Optional)\n                     error: String (Optional)\n                 }\n                 failureInfo (Optional): {\n                     category: String(usererror/servererror) (Required)\n                     code: String (Optional)\n                     message: String (Optional)\n                     details (Optional): [\n                          (Optional){\n                             name: String (Optional)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n                 retryCount: int (Required)\n                 lastRetryTime: OffsetDateTime (Optional)\n                 requeueCount: int (Required)\n                 lastRequeueTime: OffsetDateTime (Optional)\n                 result: String(success/failure) (Optional)\n             }\n         }\n     ]\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     startTaskInfo (Optional): {\n         state: String(running/completed) (Required)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): (recursive schema, see containerInfo above)\n         failureInfo (Optional): (recursive schema, see failureInfo above)\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     errors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             errorDetails (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     ]\n     isDedicated: Boolean (Optional)\n     endpointConfiguration (Optional): {\n         inboundEndpoints (Required): [\n              (Required){\n                 name: String (Required)\n                 protocol: String(tcp/udp) (Required)\n                 publicIPAddress: String (Required)\n                 publicFQDN: String (Required)\n                 frontendPort: int (Required)\n                 backendPort: int (Required)\n             }\n         ]\n     }\n     nodeAgentInfo (Optional): {\n         version: String (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n     }\n     virtualMachineInfo (Optional): {\n         imageReference (Optional): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         scaleSetVmResourceId: String (Optional)\n     }\n }\n```"
  returns:
    description: "information about the specified Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getPool(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getPool(String poolId)"
  name: "getPool(String poolId)"
  nameWithType: "BatchAsyncClient.getPool(String poolId)"
  summary: "Gets information about the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchPool> getPool(String poolId)"
  desc: "Gets information about the specified Pool."
  returns:
    description: "information about the specified Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getPool(java.lang.String,com.azure.compute.batch.models.BatchPoolGetOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getPool(String poolId, BatchPoolGetOptions options, RequestConditions requestConditions)"
  name: "getPool(String poolId, BatchPoolGetOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.getPool(String poolId, BatchPoolGetOptions options, RequestConditions requestConditions)"
  summary: "Gets information about the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Pool operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolGetOptions?alt=com.azure.compute.batch.models.BatchPoolGetOptions&text=BatchPoolGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchPool> getPool(String poolId, BatchPoolGetOptions options, RequestConditions requestConditions)"
  desc: "Gets information about the specified Pool."
  returns:
    description: "information about the specified Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getPoolWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  name: "getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Pool.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     allocationState: String(steady/resizing/stopping) (Optional)\n     allocationStateTransitionTime: OffsetDateTime (Optional)\n     vmSize: String (Optional)\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                  (Optional){\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Required)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Required)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n             caching: String(none/readonly/readwrite) (Optional)\n             diskSizeGB: Integer (Optional)\n             managedDisk (Optional): {\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                 securityProfile (Optional): {\n                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                 }\n             }\n             writeAcceleratorEnabled: Boolean (Optional)\n         }\n         securityProfile (Optional): {\n             encryptionAtHost: Boolean (Optional)\n             securityType: String(trustedLaunch/confidentialVM) (Optional)\n             uefiSettings (Optional): {\n                 secureBootEnabled: Boolean (Optional)\n                 vTpmEnabled: Boolean (Optional)\n             }\n         }\n         serviceArtifactReference (Optional): {\n             id: String (Required)\n         }\n     }\n     resizeTimeout: Duration (Optional)\n     resizeErrors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n     ]\n     resourceTags (Optional): {\n         String: String (Required)\n     }\n     currentDedicatedNodes: Integer (Optional)\n     currentLowPriorityNodes: Integer (Optional)\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     enableAutoScale: Boolean (Optional)\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n     autoScaleRun (Optional): {\n         timestamp: OffsetDateTime (Required)\n         results: String (Optional)\n         error (Optional): {\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     }\n     enableInterNodeCommunication: Boolean (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): (recursive schema, see registry above)\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         usageStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             dedicatedCoreTime: Duration (Required)\n         }\n         resourceStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             avgCPUPercentage: double (Required)\n             avgMemoryGiB: double (Required)\n             peakMemoryGiB: double (Required)\n             avgDiskGiB: double (Required)\n             peakDiskGiB: double (Required)\n             diskReadIOps: long (Required)\n             diskWriteIOps: long (Required)\n             diskReadGiB: double (Required)\n             diskWriteGiB: double (Required)\n             networkReadGiB: double (Required)\n             networkWriteGiB: double (Required)\n         }\n     }\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 accountKey: String (Required)\n                 azureFileUrl: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     identity (Optional): {\n         type: String(UserAssigned/None) (Required)\n         userAssignedIdentities (Optional): [\n              (Optional){\n                 resourceId: String (Required)\n                 clientId: String (Optional)\n                 principalId: String (Optional)\n             }\n         ]\n     }\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     upgradePolicy (Optional): {\n         mode: String(automatic/manual/rolling) (Required)\n         automaticOSUpgradePolicy (Optional): {\n             disableAutomaticRollback: Boolean (Optional)\n             enableAutomaticOSUpgrade: Boolean (Optional)\n             useRollingUpgradePolicy: Boolean (Optional)\n             osRollingUpgradeDeferral: Boolean (Optional)\n         }\n         rollingUpgradePolicy (Optional): {\n             enableCrossZoneUpgrade: Boolean (Optional)\n             maxBatchInstancePercent: Integer (Optional)\n             maxUnhealthyInstancePercent: Integer (Optional)\n             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n             pauseTimeBetweenBatches: Duration (Optional)\n             prioritizeUnhealthyInstances: Boolean (Optional)\n             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "information about the specified Pool along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTask(String jobId, String taskId)"
  name: "getTask(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.getTask(String jobId, String taskId)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchTask> getTask(String jobId, String taskId)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "information about the specified Task.\n\n For multi-instance Tasks, information such as affinityId, executionInfo and\n nodeInfo refer to the primary Task on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskGetOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTask(String jobId, String taskId, BatchTaskGetOptions options, RequestConditions requestConditions)"
  name: "getTask(String jobId, String taskId, BatchTaskGetOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.getTask(String jobId, String taskId, BatchTaskGetOptions options, RequestConditions requestConditions)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskGetOptions?alt=com.azure.compute.batch.models.BatchTaskGetOptions&text=BatchTaskGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchTask> getTask(String jobId, String taskId, BatchTaskGetOptions options, RequestConditions requestConditions)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "information about the specified Task.\n\n For multi-instance Tasks, information such as affinityId, executionInfo and\n nodeInfo refer to the primary Task on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFile(String jobId, String taskId, String filePath)"
  name: "getTaskFile(String jobId, String taskId, String filePath)"
  nameWithType: "BatchAsyncClient.getTaskFile(String jobId, String taskId, String filePath)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BinaryData> getTaskFile(String jobId, String taskId, String filePath)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskFileGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFile(String jobId, String taskId, String filePath, BatchTaskFileGetOptions options)"
  name: "getTaskFile(String jobId, String taskId, String filePath, BatchTaskFileGetOptions options)"
  nameWithType: "BatchAsyncClient.getTaskFile(String jobId, String taskId, String filePath, BatchTaskFileGetOptions options)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Task File operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskFileGetOptions?alt=com.azure.compute.batch.models.BatchTaskFileGetOptions&text=BatchTaskFileGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getTaskFile(String jobId, String taskId, String filePath, BatchTaskFileGetOptions options)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFileProperties(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFileProperties(String jobId, String taskId, String filePath)"
  name: "getTaskFileProperties(String jobId, String taskId, String filePath)"
  nameWithType: "BatchAsyncClient.getTaskFileProperties(String jobId, String taskId, String filePath)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BatchFileProperties> getTaskFileProperties(String jobId, String taskId, String filePath)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the properties of the specified Task file on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchFileProperties?alt=com.azure.compute.batch.models.BatchFileProperties&text=BatchFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFileProperties(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskFilePropertiesGetOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFileProperties(String jobId, String taskId, String filePath, BatchTaskFilePropertiesGetOptions options)"
  name: "getTaskFileProperties(String jobId, String taskId, String filePath, BatchTaskFilePropertiesGetOptions options)"
  nameWithType: "BatchAsyncClient.getTaskFileProperties(String jobId, String taskId, String filePath, BatchTaskFilePropertiesGetOptions options)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Get Task File Properties operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskFilePropertiesGetOptions?alt=com.azure.compute.batch.models.BatchTaskFilePropertiesGetOptions&text=BatchTaskFilePropertiesGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BatchFileProperties> getTaskFileProperties(String jobId, String taskId, String filePath, BatchTaskFilePropertiesGetOptions options)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the properties of the specified Task file on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchFileProperties?alt=com.azure.compute.batch.models.BatchFileProperties&text=BatchFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFilePropertiesWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Gets the properties of the specified Task file.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the properties of the specified Task file along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Returns the content of the specified Task file.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n    | ocp-range           | String         | No       | The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.                                                                                   |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nBinaryData\n```"
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.getTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     state: String(active/preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     commandLine: String (Optional)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         containerHostBatchBindMounts (Optional): [\n              (Optional){\n                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                 isReadOnly: Boolean (Optional)\n             }\n         ]\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         requeueCount: int (Required)\n         lastRequeueTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         waitTime: Duration (Required)\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "information about the specified Task.\n\n For multi-instance Tasks, information such as affinityId, executionInfo and\n nodeInfo refer to the primary Task along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExists(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExists(String jobScheduleId)"
  name: "jobScheduleExists(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.jobScheduleExists(String jobScheduleId)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Boolean> jobScheduleExists(String jobScheduleId)"
  desc: "Checks the specified Job Schedule exists."
  returns:
    description: "whether resource exists on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExists(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleExistsOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options, RequestConditions requestConditions)"
  name: "jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options, RequestConditions requestConditions)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Job Schedule Exists operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleExistsOptions?alt=com.azure.compute.batch.models.BatchJobScheduleExistsOptions&text=BatchJobScheduleExistsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options, RequestConditions requestConditions)"
  desc: "Checks the specified Job Schedule exists."
  returns:
    description: "whether resource exists on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExistsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Checks the specified Job Schedule exists.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nboolean\n```"
  returns:
    description: "whether resource exists along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listApplications()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listApplications()"
  name: "listApplications()"
  nameWithType: "BatchAsyncClient.listApplications()"
  summary: "Lists all of the applications available in the specified Account."
  syntax: "public PagedFlux<BatchApplication> listApplications()"
  desc: "Lists all of the applications available in the specified Account. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "the result of listing the applications available in an Account as paginated response with\n <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listApplications(com.azure.compute.batch.models.BatchApplicationsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listApplications(BatchApplicationsListOptions options)"
  name: "listApplications(BatchApplicationsListOptions options)"
  nameWithType: "BatchAsyncClient.listApplications(BatchApplicationsListOptions options)"
  summary: "Lists all of the applications available in the specified Account."
  parameters:
  - description: "Optional parameters for List Applications operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchApplicationsListOptions?alt=com.azure.compute.batch.models.BatchApplicationsListOptions&text=BatchApplicationsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchApplication> listApplications(BatchApplicationsListOptions options)"
  desc: "Lists all of the applications available in the specified Account. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "the result of listing the applications available in an Account as paginated response with\n <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listApplications(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listApplications(RequestOptions requestOptions)"
  name: "listApplications(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listApplications(RequestOptions requestOptions)"
  summary: "Lists all of the applications available in the specified Account."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listApplications(RequestOptions requestOptions)"
  desc: "Lists all of the applications available in the specified Account. This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.\n\n**Query Parameters**\n\n    | ---------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer  | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Required)\n     versions (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "the result of listing the applications available in an Account as paginated response with\n <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listCertificates()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listCertificates()"
  name: "listCertificates()"
  nameWithType: "BatchAsyncClient.listCertificates()"
  summary: "Lists all of the Certificates that have been added to the specified Account."
  syntax: "public PagedFlux<BatchCertificate> listCertificates()"
  desc: "Lists all of the Certificates that have been added to the specified Account."
  returns:
    description: "the result of listing the Certificates in the Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listCertificates(com.azure.compute.batch.models.BatchCertificatesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listCertificates(BatchCertificatesListOptions options)"
  name: "listCertificates(BatchCertificatesListOptions options)"
  nameWithType: "BatchAsyncClient.listCertificates(BatchCertificatesListOptions options)"
  summary: "Lists all of the Certificates that have been added to the specified Account."
  parameters:
  - description: "Optional parameters for List Certificates operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchCertificatesListOptions?alt=com.azure.compute.batch.models.BatchCertificatesListOptions&text=BatchCertificatesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchCertificate> listCertificates(BatchCertificatesListOptions options)"
  desc: "Lists all of the Certificates that have been added to the specified Account."
  returns:
    description: "the result of listing the Certificates in the Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchCertificate?alt=com.azure.compute.batch.models.BatchCertificate&text=BatchCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listCertificates(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listCertificates(RequestOptions requestOptions)"
  name: "listCertificates(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listCertificates(RequestOptions requestOptions)"
  summary: "Lists all of the Certificates that have been added to the specified Account."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listCertificates(RequestOptions requestOptions)"
  desc: "Lists all of the Certificates that have been added to the specified Account.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                      |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".    |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                           |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch\\#list-certificates. |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                    |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     thumbprint: String (Required)\n     thumbprintAlgorithm: String (Required)\n     url: String (Optional)\n     state: String(active/deleting/deletefailed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/deleting/deletefailed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     publicData: String (Optional)\n     deleteCertificateError (Optional): {\n         code: String (Optional)\n         message: String (Optional)\n         values (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n     data: byte[] (Required)\n     certificateFormat: String(pfx/cer) (Optional)\n     password: String (Optional)\n }\n```"
  returns:
    description: "the result of listing the Certificates in the Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId)"
  name: "listJobPreparationAndReleaseTaskStatus(String jobId)"
  nameWithType: "BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId)"
  summary: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId)"
  desc: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run. This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified."
  returns:
    description: "the result of listing the status of the Job Preparation and Job Release Tasks\n for a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus?alt=com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus&text=BatchJobPreparationAndReleaseTaskStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(java.lang.String,com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatusListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId, BatchJobPreparationAndReleaseTaskStatusListOptions options)"
  name: "listJobPreparationAndReleaseTaskStatus(String jobId, BatchJobPreparationAndReleaseTaskStatusListOptions options)"
  nameWithType: "BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId, BatchJobPreparationAndReleaseTaskStatusListOptions options)"
  summary: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Jobs Preparation and Release Task Status operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatusListOptions?alt=com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatusListOptions&text=BatchJobPreparationAndReleaseTaskStatusListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId, BatchJobPreparationAndReleaseTaskStatusListOptions options)"
  desc: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run. This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified."
  returns:
    description: "the result of listing the status of the Job Preparation and Job Release Tasks\n for a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus?alt=com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus&text=BatchJobPreparationAndReleaseTaskStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId, RequestOptions requestOptions)"
  name: "listJobPreparationAndReleaseTaskStatus(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listJobPreparationAndReleaseTaskStatus(String jobId, RequestOptions requestOptions)"
  summary: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listJobPreparationAndReleaseTaskStatus(String jobId, RequestOptions requestOptions)"
  desc: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run. This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                                       |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".                     |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                                            |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-job-preparation-and-release-status. |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                                     |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     poolId: String (Optional)\n     nodeId: String (Optional)\n     nodeUrl: String (Optional)\n     jobPreparationTaskExecutionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         state: String(running/completed) (Required)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     jobReleaseTaskExecutionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         state: String(running/completed) (Required)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): (recursive schema, see containerInfo above)\n         failureInfo (Optional): (recursive schema, see failureInfo above)\n         result: String(success/failure) (Optional)\n     }\n }\n```"
  returns:
    description: "the result of listing the status of the Job Preparation and Job Release Tasks\n for a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobs()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobs()"
  name: "listJobs()"
  nameWithType: "BatchAsyncClient.listJobs()"
  summary: "Lists all of the Jobs in the specified Account."
  syntax: "public PagedFlux<BatchJob> listJobs()"
  desc: "Lists all of the Jobs in the specified Account."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobs(com.azure.compute.batch.models.BatchJobsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobs(BatchJobsListOptions options)"
  name: "listJobs(BatchJobsListOptions options)"
  nameWithType: "BatchAsyncClient.listJobs(BatchJobsListOptions options)"
  summary: "Lists all of the Jobs in the specified Account."
  parameters:
  - description: "Optional parameters for List Jobs operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobsListOptions?alt=com.azure.compute.batch.models.BatchJobsListOptions&text=BatchJobsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchJob> listJobs(BatchJobsListOptions options)"
  desc: "Lists all of the Jobs in the specified Account."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobs(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobs(RequestOptions requestOptions)"
  name: "listJobs(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listJobs(RequestOptions requestOptions)"
  summary: "Lists all of the Jobs in the specified Account."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listJobs(RequestOptions requestOptions)"
  desc: "Lists all of the Jobs in the specified Account.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-jobs.           |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand    | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules()"
  name: "listJobSchedules()"
  nameWithType: "BatchAsyncClient.listJobSchedules()"
  summary: "Lists all of the Job Schedules in the specified Account."
  syntax: "public PagedFlux<BatchJobSchedule> listJobSchedules()"
  desc: "Lists all of the Job Schedules in the specified Account."
  returns:
    description: "the result of listing the Job Schedules in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules(com.azure.compute.batch.models.BatchJobSchedulesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules(BatchJobSchedulesListOptions options)"
  name: "listJobSchedules(BatchJobSchedulesListOptions options)"
  nameWithType: "BatchAsyncClient.listJobSchedules(BatchJobSchedulesListOptions options)"
  summary: "Lists all of the Job Schedules in the specified Account."
  parameters:
  - description: "Optional parameters for List Job Schedules operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedulesListOptions?alt=com.azure.compute.batch.models.BatchJobSchedulesListOptions&text=BatchJobSchedulesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchJobSchedule> listJobSchedules(BatchJobSchedulesListOptions options)"
  desc: "Lists all of the Job Schedules in the specified Account."
  returns:
    description: "the result of listing the Job Schedules in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobSchedules(RequestOptions requestOptions)"
  name: "listJobSchedules(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listJobSchedules(RequestOptions requestOptions)"
  summary: "Lists all of the Job Schedules in the specified Account."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listJobSchedules(RequestOptions requestOptions)"
  desc: "Lists all of the Job Schedules in the specified Account.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-job-schedules.  |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand    | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/completed/disabled/terminating/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/completed/disabled/terminating/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     schedule (Optional): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n             skipWithdrawFromVNet: Boolean (Optional)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                             sharedGalleryImageId: String (Optional)\n                             communityGalleryImageId: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: Integer (Optional)\n                             managedDisk (Optional): {\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                                 securityProfile (Optional): {\n                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                                 }\n                             }\n                             writeAcceleratorEnabled: Boolean (Optional)\n                         }\n                         securityProfile (Optional): {\n                             encryptionAtHost: Boolean (Optional)\n                             securityType: String(trustedLaunch/confidentialVM) (Optional)\n                             uefiSettings (Optional): {\n                                 secureBootEnabled: Boolean (Optional)\n                                 vTpmEnabled: Boolean (Optional)\n                             }\n                         }\n                         serviceArtifactReference (Optional): {\n                             id: String (Required)\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     resourceTags: String (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     certificateReferences (Optional): [\n                          (Optional){\n                             thumbprint: String (Required)\n                             thumbprintAlgorithm: String (Required)\n                             storeLocation: String(currentuser/localmachine) (Optional)\n                             storeName: String (Optional)\n                             visibility (Optional): [\n                                 String(starttask/task/remoteuser) (Optional)\n                             ]\n                         }\n                     ]\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 accountKey: String (Required)\n                                 azureFileUrl: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                     upgradePolicy (Optional): {\n                         mode: String(automatic/manual/rolling) (Required)\n                         automaticOSUpgradePolicy (Optional): {\n                             disableAutomaticRollback: Boolean (Optional)\n                             enableAutomaticOSUpgrade: Boolean (Optional)\n                             useRollingUpgradePolicy: Boolean (Optional)\n                             osRollingUpgradeDeferral: Boolean (Optional)\n                         }\n                         rollingUpgradePolicy (Optional): {\n                             enableCrossZoneUpgrade: Boolean (Optional)\n                             maxBatchInstancePercent: Integer (Optional)\n                             maxUnhealthyInstancePercent: Integer (Optional)\n                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                             pauseTimeBetweenBatches: Duration (Optional)\n                             prioritizeUnhealthyInstances: Boolean (Optional)\n                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                         }\n                     }\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     executionInfo (Optional): {\n         nextRunTime: OffsetDateTime (Optional)\n         recentJob (Optional): {\n             id: String (Optional)\n             url: String (Optional)\n         }\n         endTime: OffsetDateTime (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the result of listing the Job Schedules in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(String jobScheduleId)"
  name: "listJobsFromSchedule(String jobScheduleId)"
  nameWithType: "BatchAsyncClient.listJobsFromSchedule(String jobScheduleId)"
  summary: "Lists the Jobs that have been created under the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule from which you want to get a list of Jobs."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchJob> listJobsFromSchedule(String jobScheduleId)"
  desc: "Lists the Jobs that have been created under the specified Job Schedule."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobsFromScheduleListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(String jobScheduleId, BatchJobsFromScheduleListOptions options)"
  name: "listJobsFromSchedule(String jobScheduleId, BatchJobsFromScheduleListOptions options)"
  nameWithType: "BatchAsyncClient.listJobsFromSchedule(String jobScheduleId, BatchJobsFromScheduleListOptions options)"
  summary: "Lists the Jobs that have been created under the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule from which you want to get a list of Jobs."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Jobs From Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobsFromScheduleListOptions?alt=com.azure.compute.batch.models.BatchJobsFromScheduleListOptions&text=BatchJobsFromScheduleListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchJob> listJobsFromSchedule(String jobScheduleId, BatchJobsFromScheduleListOptions options)"
  desc: "Lists the Jobs that have been created under the specified Job Schedule."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions)"
  name: "listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Lists the Jobs that have been created under the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule from which you want to get a list of Jobs."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Lists the Jobs that have been created under the specified Job Schedule.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                           |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".         |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                                |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-jobs-in-a-job-schedule. |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                         |\n    | $expand    | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                         |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(String poolId, String nodeId)"
  name: "listNodeExtensions(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.listNodeExtensions(String poolId, String nodeId)"
  summary: "Lists the Compute Nodes Extensions in the specified Pool."
  parameters:
  - description: "The ID of the Pool that contains Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to list extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId)"
  desc: "Lists the Compute Nodes Extensions in the specified Pool."
  returns:
    description: "the result of listing the Compute Node extensions in a Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeExtensionsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(String poolId, String nodeId, BatchNodeExtensionsListOptions options)"
  name: "listNodeExtensions(String poolId, String nodeId, BatchNodeExtensionsListOptions options)"
  nameWithType: "BatchAsyncClient.listNodeExtensions(String poolId, String nodeId, BatchNodeExtensionsListOptions options)"
  summary: "Lists the Compute Nodes Extensions in the specified Pool."
  parameters:
  - description: "The ID of the Pool that contains Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to list extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Node Extensions operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeExtensionsListOptions?alt=com.azure.compute.batch.models.BatchNodeExtensionsListOptions&text=BatchNodeExtensionsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId, BatchNodeExtensionsListOptions options)"
  desc: "Lists the Compute Nodes Extensions in the specified Pool."
  returns:
    description: "the result of listing the Compute Node extensions in a Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Lists the Compute Nodes Extensions in the specified Pool."
  parameters:
  - description: "The ID of the Pool that contains Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to list extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Lists the Compute Nodes Extensions in the specified Pool.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     provisioningState: String (Optional)\n     vmExtension (Optional): {\n         name: String (Required)\n         publisher: String (Required)\n         type: String (Required)\n         typeHandlerVersion: String (Optional)\n         autoUpgradeMinorVersion: Boolean (Optional)\n         enableAutomaticUpgrade: Boolean (Optional)\n         settings (Optional): {\n             String: String (Required)\n         }\n         protectedSettings (Optional): {\n             String: String (Required)\n         }\n         provisionAfterExtensions (Optional): [\n             String (Optional)\n         ]\n     }\n     instanceView (Optional): {\n         name: String (Optional)\n         statuses (Optional): [\n              (Optional){\n                 code: String (Optional)\n                 displayStatus: String (Optional)\n                 level: String(Error/Info/Warning) (Optional)\n                 message: String (Optional)\n                 time: OffsetDateTime (Optional)\n             }\n         ]\n         subStatuses (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n }\n```"
  returns:
    description: "the result of listing the Compute Node extensions in a Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(String poolId, String nodeId)"
  name: "listNodeFiles(String poolId, String nodeId)"
  nameWithType: "BatchAsyncClient.listNodeFiles(String poolId, String nodeId)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchNodeFile> listNodeFiles(String poolId, String nodeId)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeFilesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(String poolId, String nodeId, BatchNodeFilesListOptions options)"
  name: "listNodeFiles(String poolId, String nodeId, BatchNodeFilesListOptions options)"
  nameWithType: "BatchAsyncClient.listNodeFiles(String poolId, String nodeId, BatchNodeFilesListOptions options)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Node Files operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeFilesListOptions?alt=com.azure.compute.batch.models.BatchNodeFilesListOptions&text=BatchNodeFilesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchNodeFile> listNodeFiles(String poolId, String nodeId, BatchNodeFilesListOptions options)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node.\n\n**Query Parameters**\n\n    | ---------- | -------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type     | Required | Description                                                                                                                                                                       |\n    | timeOut    | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".     |\n    | maxresults | Integer  | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                            |\n    | $filter    | String   | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-compute-node-files. |\n    | recursive  | Boolean  | No       | Whether to list children of a directory.                                                                                                                                          |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     name: String (Optional)\n     url: String (Optional)\n     isDirectory: Boolean (Optional)\n     properties (Optional): {\n         creationTime: OffsetDateTime (Optional)\n         lastModified: OffsetDateTime (Required)\n         contentLength: long (Required)\n         contentType: String (Optional)\n         fileMode: String (Optional)\n     }\n }\n```"
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodes(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodes(String poolId)"
  name: "listNodes(String poolId)"
  nameWithType: "BatchAsyncClient.listNodes(String poolId)"
  summary: "Lists the Compute Nodes in the specified Pool."
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchNode> listNodes(String poolId)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the result of listing the Compute Nodes in a Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodes(java.lang.String,com.azure.compute.batch.models.BatchNodesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodes(String poolId, BatchNodesListOptions options)"
  name: "listNodes(String poolId, BatchNodesListOptions options)"
  nameWithType: "BatchAsyncClient.listNodes(String poolId, BatchNodesListOptions options)"
  summary: "Lists the Compute Nodes in the specified Pool."
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Nodes operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodesListOptions?alt=com.azure.compute.batch.models.BatchNodesListOptions&text=BatchNodesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchNode> listNodes(String poolId, BatchNodesListOptions options)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the result of listing the Compute Nodes in a Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listNodes(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listNodes(String poolId, RequestOptions requestOptions)"
  name: "listNodes(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listNodes(String poolId, RequestOptions requestOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listNodes(String poolId, RequestOptions requestOptions)"
  desc: "Lists the Compute Nodes in the specified Pool.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name       | Type         | Required | Description                                                                                                                                                                    |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".  |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                         |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-nodes-in-a-pool. |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     url: String (Optional)\n     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted/upgradingos/deallocated/deallocating) (Optional)\n     schedulingState: String(enabled/disabled) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     lastBootTime: OffsetDateTime (Optional)\n     allocationTime: OffsetDateTime (Optional)\n     ipAddress: String (Optional)\n     affinityId: String (Optional)\n     vmSize: String (Optional)\n     totalTasksRun: Integer (Optional)\n     runningTasksCount: Integer (Optional)\n     runningTaskSlotsCount: Integer (Optional)\n     totalTasksSucceeded: Integer (Optional)\n     recentTasks (Optional): [\n          (Optional){\n             taskUrl: String (Optional)\n             jobId: String (Optional)\n             taskId: String (Optional)\n             subtaskId: Integer (Optional)\n             taskState: String(active/preparing/running/completed) (Required)\n             executionInfo (Optional): {\n                 startTime: OffsetDateTime (Optional)\n                 endTime: OffsetDateTime (Optional)\n                 exitCode: Integer (Optional)\n                 containerInfo (Optional): {\n                     containerId: String (Optional)\n                     state: String (Optional)\n                     error: String (Optional)\n                 }\n                 failureInfo (Optional): {\n                     category: String(usererror/servererror) (Required)\n                     code: String (Optional)\n                     message: String (Optional)\n                     details (Optional): [\n                          (Optional){\n                             name: String (Optional)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n                 retryCount: int (Required)\n                 lastRetryTime: OffsetDateTime (Optional)\n                 requeueCount: int (Required)\n                 lastRequeueTime: OffsetDateTime (Optional)\n                 result: String(success/failure) (Optional)\n             }\n         }\n     ]\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     startTaskInfo (Optional): {\n         state: String(running/completed) (Required)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): (recursive schema, see containerInfo above)\n         failureInfo (Optional): (recursive schema, see failureInfo above)\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     errors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             errorDetails (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     ]\n     isDedicated: Boolean (Optional)\n     endpointConfiguration (Optional): {\n         inboundEndpoints (Required): [\n              (Required){\n                 name: String (Required)\n                 protocol: String(tcp/udp) (Required)\n                 publicIPAddress: String (Required)\n                 publicFQDN: String (Required)\n                 frontendPort: int (Required)\n                 backendPort: int (Required)\n             }\n         ]\n     }\n     nodeAgentInfo (Optional): {\n         version: String (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n     }\n     virtualMachineInfo (Optional): {\n         imageReference (Optional): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         scaleSetVmResourceId: String (Optional)\n     }\n }\n```"
  returns:
    description: "the result of listing the Compute Nodes in a Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts()"
  name: "listPoolNodeCounts()"
  nameWithType: "BatchAsyncClient.listPoolNodeCounts()"
  summary: "Gets the number of Compute Nodes in each state, grouped by Pool."
  syntax: "public PagedFlux<BatchPoolNodeCounts> listPoolNodeCounts()"
  desc: "Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query."
  returns:
    description: "the number of Compute Nodes in each state, grouped by Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolNodeCounts?alt=com.azure.compute.batch.models.BatchPoolNodeCounts&text=BatchPoolNodeCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts(com.azure.compute.batch.models.BatchPoolNodeCountsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts(BatchPoolNodeCountsListOptions options)"
  name: "listPoolNodeCounts(BatchPoolNodeCountsListOptions options)"
  nameWithType: "BatchAsyncClient.listPoolNodeCounts(BatchPoolNodeCountsListOptions options)"
  summary: "Gets the number of Compute Nodes in each state, grouped by Pool."
  parameters:
  - description: "Optional parameters for List Pool Node Counts operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolNodeCountsListOptions?alt=com.azure.compute.batch.models.BatchPoolNodeCountsListOptions&text=BatchPoolNodeCountsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchPoolNodeCounts> listPoolNodeCounts(BatchPoolNodeCountsListOptions options)"
  desc: "Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query."
  returns:
    description: "the number of Compute Nodes in each state, grouped by Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolNodeCounts?alt=com.azure.compute.batch.models.BatchPoolNodeCounts&text=BatchPoolNodeCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolNodeCounts(RequestOptions requestOptions)"
  name: "listPoolNodeCounts(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listPoolNodeCounts(RequestOptions requestOptions)"
  summary: "Gets the number of Compute Nodes in each state, grouped by Pool."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listPoolNodeCounts(RequestOptions requestOptions)"
  desc: "Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query.\n\n**Query Parameters**\n\n    | ---------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer  | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String   | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-support-images. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     poolId: String (Required)\n     dedicated (Optional): {\n         creating: int (Required)\n         idle: int (Required)\n         offline: int (Required)\n         preempted: int (Required)\n         rebooting: int (Required)\n         reimaging: int (Required)\n         running: int (Required)\n         starting: int (Required)\n         startTaskFailed: int (Required)\n         leavingPool: int (Required)\n         unknown: int (Required)\n         unusable: int (Required)\n         waitingForStartTask: int (Required)\n         deallocated: int (Required)\n         deallocating: int (Required)\n         total: int (Required)\n         upgradingOS: int (Required)\n     }\n     lowPriority (Optional): (recursive schema, see lowPriority above)\n }\n```"
  returns:
    description: "the number of Compute Nodes in each state, grouped by Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPools()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPools()"
  name: "listPools()"
  nameWithType: "BatchAsyncClient.listPools()"
  summary: "Lists all of the Pools which be mounted."
  syntax: "public PagedFlux<BatchPool> listPools()"
  desc: "Lists all of the Pools which be mounted."
  returns:
    description: "the result of listing the Pools in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPools(com.azure.compute.batch.models.BatchPoolsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPools(BatchPoolsListOptions options)"
  name: "listPools(BatchPoolsListOptions options)"
  nameWithType: "BatchAsyncClient.listPools(BatchPoolsListOptions options)"
  summary: "Lists all of the Pools which be mounted."
  parameters:
  - description: "Optional parameters for List Pools operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolsListOptions?alt=com.azure.compute.batch.models.BatchPoolsListOptions&text=BatchPoolsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchPool> listPools(BatchPoolsListOptions options)"
  desc: "Lists all of the Pools which be mounted."
  returns:
    description: "the result of listing the Pools in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPools(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPools(RequestOptions requestOptions)"
  name: "listPools(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listPools(RequestOptions requestOptions)"
  summary: "Lists all of the Pools which be mounted."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listPools(RequestOptions requestOptions)"
  desc: "Lists all of the Pools which be mounted.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-pools.          |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand    | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     allocationState: String(steady/resizing/stopping) (Optional)\n     allocationStateTransitionTime: OffsetDateTime (Optional)\n     vmSize: String (Optional)\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                  (Optional){\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Required)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Required)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n             caching: String(none/readonly/readwrite) (Optional)\n             diskSizeGB: Integer (Optional)\n             managedDisk (Optional): {\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                 securityProfile (Optional): {\n                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                 }\n             }\n             writeAcceleratorEnabled: Boolean (Optional)\n         }\n         securityProfile (Optional): {\n             encryptionAtHost: Boolean (Optional)\n             securityType: String(trustedLaunch/confidentialVM) (Optional)\n             uefiSettings (Optional): {\n                 secureBootEnabled: Boolean (Optional)\n                 vTpmEnabled: Boolean (Optional)\n             }\n         }\n         serviceArtifactReference (Optional): {\n             id: String (Required)\n         }\n     }\n     resizeTimeout: Duration (Optional)\n     resizeErrors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n     ]\n     resourceTags (Optional): {\n         String: String (Required)\n     }\n     currentDedicatedNodes: Integer (Optional)\n     currentLowPriorityNodes: Integer (Optional)\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     enableAutoScale: Boolean (Optional)\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n     autoScaleRun (Optional): {\n         timestamp: OffsetDateTime (Required)\n         results: String (Optional)\n         error (Optional): {\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     }\n     enableInterNodeCommunication: Boolean (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): (recursive schema, see registry above)\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         usageStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             dedicatedCoreTime: Duration (Required)\n         }\n         resourceStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             avgCPUPercentage: double (Required)\n             avgMemoryGiB: double (Required)\n             peakMemoryGiB: double (Required)\n             avgDiskGiB: double (Required)\n             peakDiskGiB: double (Required)\n             diskReadIOps: long (Required)\n             diskWriteIOps: long (Required)\n             diskReadGiB: double (Required)\n             diskWriteGiB: double (Required)\n             networkReadGiB: double (Required)\n             networkWriteGiB: double (Required)\n         }\n     }\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 accountKey: String (Required)\n                 azureFileUrl: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     identity (Optional): {\n         type: String(UserAssigned/None) (Required)\n         userAssignedIdentities (Optional): [\n              (Optional){\n                 resourceId: String (Required)\n                 clientId: String (Optional)\n                 principalId: String (Optional)\n             }\n         ]\n     }\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     upgradePolicy (Optional): {\n         mode: String(automatic/manual/rolling) (Required)\n         automaticOSUpgradePolicy (Optional): {\n             disableAutomaticRollback: Boolean (Optional)\n             enableAutomaticOSUpgrade: Boolean (Optional)\n             useRollingUpgradePolicy: Boolean (Optional)\n             osRollingUpgradeDeferral: Boolean (Optional)\n         }\n         rollingUpgradePolicy (Optional): {\n             enableCrossZoneUpgrade: Boolean (Optional)\n             maxBatchInstancePercent: Integer (Optional)\n             maxUnhealthyInstancePercent: Integer (Optional)\n             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n             pauseTimeBetweenBatches: Duration (Optional)\n             prioritizeUnhealthyInstances: Boolean (Optional)\n             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "the result of listing the Pools in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics()"
  name: "listPoolUsageMetrics()"
  nameWithType: "BatchAsyncClient.listPoolUsageMetrics()"
  summary: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account."
  syntax: "public PagedFlux<BatchPoolUsageMetrics> listPoolUsageMetrics()"
  desc: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account. If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned."
  returns:
    description: "the result of a listing the usage metrics for an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolUsageMetrics?alt=com.azure.compute.batch.models.BatchPoolUsageMetrics&text=BatchPoolUsageMetrics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics(com.azure.compute.batch.models.BatchPoolUsageMetricsListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics(BatchPoolUsageMetricsListOptions options)"
  name: "listPoolUsageMetrics(BatchPoolUsageMetricsListOptions options)"
  nameWithType: "BatchAsyncClient.listPoolUsageMetrics(BatchPoolUsageMetricsListOptions options)"
  summary: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account."
  parameters:
  - description: "Optional parameters for List Pool Usage Metrics operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUsageMetricsListOptions?alt=com.azure.compute.batch.models.BatchPoolUsageMetricsListOptions&text=BatchPoolUsageMetricsListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchPoolUsageMetrics> listPoolUsageMetrics(BatchPoolUsageMetricsListOptions options)"
  desc: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account. If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned."
  returns:
    description: "the result of a listing the usage metrics for an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolUsageMetrics?alt=com.azure.compute.batch.models.BatchPoolUsageMetrics&text=BatchPoolUsageMetrics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listPoolUsageMetrics(RequestOptions requestOptions)"
  name: "listPoolUsageMetrics(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listPoolUsageMetrics(RequestOptions requestOptions)"
  summary: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listPoolUsageMetrics(RequestOptions requestOptions)"
  desc: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account. If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.\n\n**Query Parameters**\n\n    | ---------- | -------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type           | Required | Description                                                                                                                                                                                                                 |\n    | timeOut    | Duration       | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".                                               |\n    | maxresults | Integer        | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                                                                      |\n    | startTime  | OffsetDateTime | No       | The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available. |\n    | endtime    | OffsetDateTime | No       | The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.                |\n    | $filter    | String         | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-account-usage-metrics.                                        |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     poolId: String (Required)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Required)\n     vmSize: String (Required)\n     totalCoreHours: double (Required)\n }\n```"
  returns:
    description: "the result of a listing the usage metrics for an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(String jobId, String taskId)"
  name: "listSubTasks(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.listSubTasks(String jobId, String taskId)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchSubtask> listSubTasks(String jobId, String taskId)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the result of listing the subtasks of a Task as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSubtask?alt=com.azure.compute.batch.models.BatchSubtask&text=BatchSubtask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchSubTasksListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(String jobId, String taskId, BatchSubTasksListOptions options)"
  name: "listSubTasks(String jobId, String taskId, BatchSubTasksListOptions options)"
  nameWithType: "BatchAsyncClient.listSubTasks(String jobId, String taskId, BatchSubTasksListOptions options)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List SubTasks operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchSubTasksListOptions?alt=com.azure.compute.batch.models.BatchSubTasksListOptions&text=BatchSubTasksListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchSubtask> listSubTasks(String jobId, String taskId, BatchSubTasksListOptions options)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the result of listing the subtasks of a Task as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSubtask?alt=com.azure.compute.batch.models.BatchSubtask&text=BatchSubtask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSubTasks(String jobId, String taskId, RequestOptions requestOptions)"
  name: "listSubTasks(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listSubTasks(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listSubTasks(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: Integer (Optional)\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     exitCode: Integer (Optional)\n     containerInfo (Optional): {\n         containerId: String (Optional)\n         state: String (Optional)\n         error: String (Optional)\n     }\n     failureInfo (Optional): {\n         category: String(usererror/servererror) (Required)\n         code: String (Optional)\n         message: String (Optional)\n         details (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n     state: String(preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     result: String(success/failure) (Optional)\n }\n```"
  returns:
    description: "the result of listing the subtasks of a Task as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages()"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages()"
  name: "listSupportedImages()"
  nameWithType: "BatchAsyncClient.listSupportedImages()"
  summary: "Lists all Virtual Machine Images supported by the Azure Batch service."
  syntax: "public PagedFlux<BatchSupportedImage> listSupportedImages()"
  desc: "Lists all Virtual Machine Images supported by the Azure Batch service."
  returns:
    description: "the result of listing the supported Virtual Machine Images as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSupportedImage?alt=com.azure.compute.batch.models.BatchSupportedImage&text=BatchSupportedImage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages(RequestOptions requestOptions)"
  name: "listSupportedImages(RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listSupportedImages(RequestOptions requestOptions)"
  summary: "Lists all Virtual Machine Images supported by the Azure Batch service."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listSupportedImages(RequestOptions requestOptions)"
  desc: "Lists all Virtual Machine Images supported by the Azure Batch service.\n\n**Query Parameters**\n\n    | ---------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer  | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String   | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-support-images. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     nodeAgentSKUId: String (Required)\n     imageReference (Required): {\n         publisher: String (Optional)\n         offer: String (Optional)\n         sku: String (Optional)\n         version: String (Optional)\n         virtualMachineImageId: String (Optional)\n         exactVersion: String (Optional)\n         sharedGalleryImageId: String (Optional)\n         communityGalleryImageId: String (Optional)\n     }\n     osType: String(linux/windows) (Required)\n     capabilities (Optional): [\n         String (Optional)\n     ]\n     batchSupportEndOfLife: OffsetDateTime (Optional)\n     verificationType: String(verified/unverified) (Required)\n }\n```"
  returns:
    description: "the result of listing the supported Virtual Machine Images as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages(com.azure.compute.batch.models.SupportedBatchImagesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listSupportedImages(SupportedBatchImagesListOptions options)"
  name: "listSupportedImages(SupportedBatchImagesListOptions options)"
  nameWithType: "BatchAsyncClient.listSupportedImages(SupportedBatchImagesListOptions options)"
  summary: "Lists all Virtual Machine Images supported by the Azure Batch service."
  parameters:
  - description: "Optional parameters for List Supported Images operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.SupportedBatchImagesListOptions?alt=com.azure.compute.batch.models.SupportedBatchImagesListOptions&text=SupportedBatchImagesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchSupportedImage> listSupportedImages(SupportedBatchImagesListOptions options)"
  desc: "Lists all Virtual Machine Images supported by the Azure Batch service."
  returns:
    description: "the result of listing the supported Virtual Machine Images as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSupportedImage?alt=com.azure.compute.batch.models.BatchSupportedImage&text=BatchSupportedImage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(String jobId, String taskId)"
  name: "listTaskFiles(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.listTaskFiles(String jobId, String taskId)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchNodeFile> listTaskFiles(String jobId, String taskId)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskFilesListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(String jobId, String taskId, BatchTaskFilesListOptions options)"
  name: "listTaskFiles(String jobId, String taskId, BatchTaskFilesListOptions options)"
  nameWithType: "BatchAsyncClient.listTaskFiles(String jobId, String taskId, BatchTaskFilesListOptions options)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Task Files operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskFilesListOptions?alt=com.azure.compute.batch.models.BatchTaskFilesListOptions&text=BatchTaskFilesListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchNodeFile> listTaskFiles(String jobId, String taskId, BatchTaskFilesListOptions options)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTaskFiles(String jobId, String taskId, RequestOptions requestOptions)"
  name: "listTaskFiles(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listTaskFiles(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTaskFiles(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node.\n\n**Query Parameters**\n\n    | ---------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer  | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String   | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-task-files.     |\n    | recursive  | Boolean  | No       | Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.                           |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     name: String (Optional)\n     url: String (Optional)\n     isDirectory: Boolean (Optional)\n     properties (Optional): {\n         creationTime: OffsetDateTime (Optional)\n         lastModified: OffsetDateTime (Required)\n         contentLength: long (Required)\n         contentType: String (Optional)\n         fileMode: String (Optional)\n     }\n }\n```"
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with\n a Task on a Compute Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTasks(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTasks(String jobId)"
  name: "listTasks(String jobId)"
  nameWithType: "BatchAsyncClient.listTasks(String jobId)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<BatchTask> listTasks(String jobId)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the result of listing the Tasks in a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTasks(java.lang.String,com.azure.compute.batch.models.BatchTasksListOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTasks(String jobId, BatchTasksListOptions options)"
  name: "listTasks(String jobId, BatchTasksListOptions options)"
  nameWithType: "BatchAsyncClient.listTasks(String jobId, BatchTasksListOptions options)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for List Tasks operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTasksListOptions?alt=com.azure.compute.batch.models.BatchTasksListOptions&text=BatchTasksListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BatchTask> listTasks(String jobId, BatchTasksListOptions options)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the result of listing the Tasks in a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.listTasks(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.listTasks(String jobId, RequestOptions requestOptions)"
  name: "listTasks(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.listTasks(String jobId, RequestOptions requestOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTasks(String jobId, RequestOptions requestOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.\n\n**Query Parameters**\n\n    | ---------- | ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name       | Type         | Required | Description                                                                                                                                                                   |\n    | timeOut    | Duration     | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n    | maxresults | Integer      | No       | The maximum number of items to return in the response. A maximum of 1000 applications can be returned.                                                                        |\n    | $filter    | String       | No       | An OData $filter clause. For more information on constructing this filter, see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch\\#list-tasks.          |\n    | $select    | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                                                                                 |\n    | $expand    | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                                                                                 |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     state: String(active/preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     commandLine: String (Optional)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         containerHostBatchBindMounts (Optional): [\n              (Optional){\n                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                 isReadOnly: Boolean (Optional)\n             }\n         ]\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         requeueCount: int (Required)\n         lastRequeueTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         waitTime: Duration (Required)\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "the result of listing the Tasks in a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.poolExists(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.poolExists(String poolId)"
  name: "poolExists(String poolId)"
  nameWithType: "BatchAsyncClient.poolExists(String poolId)"
  summary: "Gets basic properties of a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Boolean> poolExists(String poolId)"
  desc: "Gets basic properties of a Pool."
  returns:
    description: "basic properties of a Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.poolExists(java.lang.String,com.azure.compute.batch.models.BatchPoolExistsOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.poolExists(String poolId, BatchPoolExistsOptions options, RequestConditions requestConditions)"
  name: "poolExists(String poolId, BatchPoolExistsOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.poolExists(String poolId, BatchPoolExistsOptions options, RequestConditions requestConditions)"
  summary: "Gets basic properties of a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Pool Exists operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolExistsOptions?alt=com.azure.compute.batch.models.BatchPoolExistsOptions&text=BatchPoolExistsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> poolExists(String poolId, BatchPoolExistsOptions options, RequestConditions requestConditions)"
  desc: "Gets basic properties of a Pool."
  returns:
    description: "basic properties of a Pool on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.poolExistsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  name: "poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Gets basic properties of a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Gets basic properties of a Pool.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nboolean\n```"
  returns:
    description: "basic properties of a Pool along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.reactivateTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.reactivateTask(String jobId, String taskId)"
  name: "reactivateTask(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.reactivateTask(String jobId, String taskId)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> reactivateTask(String jobId, String taskId)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.reactivateTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskReactivateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.reactivateTask(String jobId, String taskId, BatchTaskReactivateOptions options, RequestConditions requestConditions)"
  name: "reactivateTask(String jobId, String taskId, BatchTaskReactivateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.reactivateTask(String jobId, String taskId, BatchTaskReactivateOptions options, RequestConditions requestConditions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Reactivate Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskReactivateOptions?alt=com.azure.compute.batch.models.BatchTaskReactivateOptions&text=BatchTaskReactivateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> reactivateTask(String jobId, String taskId, BatchTaskReactivateOptions options, RequestConditions requestConditions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.reactivateTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJob(java.lang.String,com.azure.compute.batch.models.BatchJob)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJob(String jobId, BatchJob job)"
  name: "replaceJob(String jobId, BatchJob job)"
  nameWithType: "BatchAsyncClient.replaceJob(String jobId, BatchJob job)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceJob(String jobId, BatchJob job)"
  desc: "Updates the properties of the specified Job. This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJob(java.lang.String,com.azure.compute.batch.models.BatchJob,com.azure.compute.batch.models.BatchJobReplaceOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJob(String jobId, BatchJob job, BatchJobReplaceOptions options, RequestConditions requestConditions)"
  name: "replaceJob(String jobId, BatchJob job, BatchJobReplaceOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.replaceJob(String jobId, BatchJob job, BatchJobReplaceOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Replace Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobReplaceOptions?alt=com.azure.compute.batch.models.BatchJobReplaceOptions&text=BatchJobReplaceOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceJob(String jobId, BatchJob job, BatchJobReplaceOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Job. This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobSchedule)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule)"
  name: "replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule)"
  nameWithType: "BatchAsyncClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule)"
  desc: "Updates the properties of the specified Job Schedule. This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobSchedule,com.azure.compute.batch.models.BatchJobScheduleReplaceOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule, BatchJobScheduleReplaceOptions options, RequestConditions requestConditions)"
  name: "replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule, BatchJobScheduleReplaceOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule, BatchJobScheduleReplaceOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Replace Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleReplaceOptions?alt=com.azure.compute.batch.models.BatchJobScheduleReplaceOptions&text=BatchJobScheduleReplaceOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule, BatchJobScheduleReplaceOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Job Schedule. This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJobScheduleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job Schedule. This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/completed/disabled/terminating/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/completed/disabled/terminating/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     schedule (Optional): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n             skipWithdrawFromVNet: Boolean (Optional)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                             sharedGalleryImageId: String (Optional)\n                             communityGalleryImageId: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: Integer (Optional)\n                             managedDisk (Optional): {\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                                 securityProfile (Optional): {\n                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                                 }\n                             }\n                             writeAcceleratorEnabled: Boolean (Optional)\n                         }\n                         securityProfile (Optional): {\n                             encryptionAtHost: Boolean (Optional)\n                             securityType: String(trustedLaunch/confidentialVM) (Optional)\n                             uefiSettings (Optional): {\n                                 secureBootEnabled: Boolean (Optional)\n                                 vTpmEnabled: Boolean (Optional)\n                             }\n                         }\n                         serviceArtifactReference (Optional): {\n                             id: String (Required)\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     resourceTags: String (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     certificateReferences (Optional): [\n                          (Optional){\n                             thumbprint: String (Required)\n                             thumbprintAlgorithm: String (Required)\n                             storeLocation: String(currentuser/localmachine) (Optional)\n                             storeName: String (Optional)\n                             visibility (Optional): [\n                                 String(starttask/task/remoteuser) (Optional)\n                             ]\n                         }\n                     ]\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 accountKey: String (Required)\n                                 azureFileUrl: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                     upgradePolicy (Optional): {\n                         mode: String(automatic/manual/rolling) (Required)\n                         automaticOSUpgradePolicy (Optional): {\n                             disableAutomaticRollback: Boolean (Optional)\n                             enableAutomaticOSUpgrade: Boolean (Optional)\n                             useRollingUpgradePolicy: Boolean (Optional)\n                             osRollingUpgradeDeferral: Boolean (Optional)\n                         }\n                         rollingUpgradePolicy (Optional): {\n                             enableCrossZoneUpgrade: Boolean (Optional)\n                             maxBatchInstancePercent: Integer (Optional)\n                             maxUnhealthyInstancePercent: Integer (Optional)\n                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                             pauseTimeBetweenBatches: Duration (Optional)\n                             prioritizeUnhealthyInstances: Boolean (Optional)\n                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                         }\n                     }\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     executionInfo (Optional): {\n         nextRunTime: OffsetDateTime (Optional)\n         recentJob (Optional): {\n             id: String (Optional)\n             url: String (Optional)\n         }\n         endTime: OffsetDateTime (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceJobWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job. This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: long (Required)\n         numFailedTasks: long (Required)\n         numTaskRetries: long (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserUpdateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters)"
  name: "replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters)"
  nameWithType: "BatchAsyncClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserUpdateParameters?alt=com.azure.compute.batch.models.BatchNodeUserUpdateParameters&text=BatchNodeUserUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserUpdateParameters,com.azure.compute.batch.models.BatchNodeUserReplaceOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters, BatchNodeUserReplaceOptions options)"
  name: "replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters, BatchNodeUserReplaceOptions options)"
  nameWithType: "BatchAsyncClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters, BatchNodeUserReplaceOptions options)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserUpdateParameters?alt=com.azure.compute.batch.models.BatchNodeUserUpdateParameters&text=BatchNodeUserUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Replace Node User operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserReplaceOptions?alt=com.azure.compute.batch.models.BatchNodeUserReplaceOptions&text=BatchNodeUserReplaceOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters, BatchNodeUserReplaceOptions options)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUserWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  name: "replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     password: String (Optional)\n     expiryTime: OffsetDateTime (Optional)\n     sshPublicKey: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replacePoolProperties(java.lang.String,com.azure.compute.batch.models.BatchPoolReplaceParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replacePoolProperties(String poolId, BatchPoolReplaceParameters pool)"
  name: "replacePoolProperties(String poolId, BatchPoolReplaceParameters pool)"
  nameWithType: "BatchAsyncClient.replacePoolProperties(String poolId, BatchPoolReplaceParameters pool)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolReplaceParameters?alt=com.azure.compute.batch.models.BatchPoolReplaceParameters&text=BatchPoolReplaceParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replacePoolProperties(String poolId, BatchPoolReplaceParameters pool)"
  desc: "Updates the properties of the specified Pool. This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replacePoolProperties(java.lang.String,com.azure.compute.batch.models.BatchPoolReplaceParameters,com.azure.compute.batch.models.BatchPoolPropertiesReplaceOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replacePoolProperties(String poolId, BatchPoolReplaceParameters pool, BatchPoolPropertiesReplaceOptions options)"
  name: "replacePoolProperties(String poolId, BatchPoolReplaceParameters pool, BatchPoolPropertiesReplaceOptions options)"
  nameWithType: "BatchAsyncClient.replacePoolProperties(String poolId, BatchPoolReplaceParameters pool, BatchPoolPropertiesReplaceOptions options)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolReplaceParameters?alt=com.azure.compute.batch.models.BatchPoolReplaceParameters&text=BatchPoolReplaceParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Replace Pool Properties operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolPropertiesReplaceOptions?alt=com.azure.compute.batch.models.BatchPoolPropertiesReplaceOptions&text=BatchPoolPropertiesReplaceOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replacePoolProperties(String poolId, BatchPoolReplaceParameters pool, BatchPoolPropertiesReplaceOptions options)"
  desc: "Updates the properties of the specified Pool. This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replacePoolPropertiesWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  name: "replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Pool. This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     certificateReferences (Required): [\n          (Required){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     applicationPackageReferences (Required): [\n          (Required){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     metadata (Required): [\n          (Required){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTask)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceTask(String jobId, String taskId, BatchTask task)"
  name: "replaceTask(String jobId, String taskId, BatchTask task)"
  nameWithType: "BatchAsyncClient.replaceTask(String jobId, String taskId, BatchTask task)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "task"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceTask(String jobId, String taskId, BatchTask task)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTask,com.azure.compute.batch.models.BatchTaskReplaceOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceTask(String jobId, String taskId, BatchTask task, BatchTaskReplaceOptions options, RequestConditions requestConditions)"
  name: "replaceTask(String jobId, String taskId, BatchTask task, BatchTaskReplaceOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.replaceTask(String jobId, String taskId, BatchTask task, BatchTaskReplaceOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "task"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Replace Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskReplaceOptions?alt=com.azure.compute.batch.models.BatchTaskReplaceOptions&text=BatchTaskReplaceOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> replaceTask(String jobId, String taskId, BatchTask task, BatchTaskReplaceOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.replaceTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  name: "replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "task"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Task.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     state: String(active/preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     commandLine: String (Optional)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         containerHostBatchBindMounts (Optional): [\n              (Optional){\n                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                 isReadOnly: Boolean (Optional)\n             }\n         ]\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         requeueCount: int (Required)\n         lastRequeueTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: long (Required)\n         writeIOps: long (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         waitTime: Duration (Required)\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.terminateTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.terminateTask(String jobId, String taskId)"
  name: "terminateTask(String jobId, String taskId)"
  nameWithType: "BatchAsyncClient.terminateTask(String jobId, String taskId)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> terminateTask(String jobId, String taskId)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.terminateTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTaskTerminateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.terminateTask(String jobId, String taskId, BatchTaskTerminateOptions options, RequestConditions requestConditions)"
  name: "terminateTask(String jobId, String taskId, BatchTaskTerminateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.terminateTask(String jobId, String taskId, BatchTaskTerminateOptions options, RequestConditions requestConditions)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional parameters for Terminate Task operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskTerminateOptions?alt=com.azure.compute.batch.models.BatchTaskTerminateOptions&text=BatchTaskTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> terminateTask(String jobId, String taskId, BatchTaskTerminateOptions options, RequestConditions requestConditions)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.terminateTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJob(java.lang.String,com.azure.compute.batch.models.BatchJobUpdateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJob(String jobId, BatchJobUpdateParameters job)"
  name: "updateJob(String jobId, BatchJobUpdateParameters job)"
  nameWithType: "BatchAsyncClient.updateJob(String jobId, BatchJobUpdateParameters job)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobUpdateParameters?alt=com.azure.compute.batch.models.BatchJobUpdateParameters&text=BatchJobUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateJob(String jobId, BatchJobUpdateParameters job)"
  desc: "Updates the properties of the specified Job. This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJob(java.lang.String,com.azure.compute.batch.models.BatchJobUpdateParameters,com.azure.compute.batch.models.BatchJobUpdateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJob(String jobId, BatchJobUpdateParameters job, BatchJobUpdateOptions options, RequestConditions requestConditions)"
  name: "updateJob(String jobId, BatchJobUpdateParameters job, BatchJobUpdateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.updateJob(String jobId, BatchJobUpdateParameters job, BatchJobUpdateOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "job"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobUpdateParameters?alt=com.azure.compute.batch.models.BatchJobUpdateParameters&text=BatchJobUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Update Job operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobUpdateOptions?alt=com.azure.compute.batch.models.BatchJobUpdateOptions&text=BatchJobUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateJob(String jobId, BatchJobUpdateParameters job, BatchJobUpdateOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Job. This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleUpdateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule)"
  name: "updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule)"
  nameWithType: "BatchAsyncClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleUpdateParameters?alt=com.azure.compute.batch.models.BatchJobScheduleUpdateParameters&text=BatchJobScheduleUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule)"
  desc: "Updates the properties of the specified Job Schedule. This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleUpdateParameters,com.azure.compute.batch.models.BatchJobScheduleUpdateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule, BatchJobScheduleUpdateOptions options, RequestConditions requestConditions)"
  name: "updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule, BatchJobScheduleUpdateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule, BatchJobScheduleUpdateOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleUpdateParameters?alt=com.azure.compute.batch.models.BatchJobScheduleUpdateParameters&text=BatchJobScheduleUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Update Job Schedule operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleUpdateOptions?alt=com.azure.compute.batch.models.BatchJobScheduleUpdateOptions&text=BatchJobScheduleUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule, BatchJobScheduleUpdateOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Job Schedule. This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJobScheduleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job Schedule. This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     schedule (Optional): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Optional): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n             skipWithdrawFromVNet: Boolean (Optional)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                 containerHostBatchBindMounts (Optional): [\n                      (Optional){\n                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                         isReadOnly: Boolean (Optional)\n                     }\n                 ]\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                             sharedGalleryImageId: String (Optional)\n                             communityGalleryImageId: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Required)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: Integer (Optional)\n                             managedDisk (Optional): {\n                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                                 securityProfile (Optional): {\n                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                                 }\n                             }\n                             writeAcceleratorEnabled: Boolean (Optional)\n                         }\n                         securityProfile (Optional): {\n                             encryptionAtHost: Boolean (Optional)\n                             securityType: String(trustedLaunch/confidentialVM) (Optional)\n                             uefiSettings (Optional): {\n                                 secureBootEnabled: Boolean (Optional)\n                                 vTpmEnabled: Boolean (Optional)\n                             }\n                         }\n                         serviceArtifactReference (Optional): {\n                             id: String (Required)\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     resourceTags: String (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     certificateReferences (Optional): [\n                          (Optional){\n                             thumbprint: String (Required)\n                             thumbprintAlgorithm: String (Required)\n                             storeLocation: String(currentuser/localmachine) (Optional)\n                             storeName: String (Optional)\n                             visibility (Optional): [\n                                 String(starttask/task/remoteuser) (Optional)\n                             ]\n                         }\n                     ]\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 accountKey: String (Required)\n                                 azureFileUrl: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                     upgradePolicy (Optional): {\n                         mode: String(automatic/manual/rolling) (Required)\n                         automaticOSUpgradePolicy (Optional): {\n                             disableAutomaticRollback: Boolean (Optional)\n                             enableAutomaticOSUpgrade: Boolean (Optional)\n                             useRollingUpgradePolicy: Boolean (Optional)\n                             osRollingUpgradeDeferral: Boolean (Optional)\n                         }\n                         rollingUpgradePolicy (Optional): {\n                             enableCrossZoneUpgrade: Boolean (Optional)\n                             maxBatchInstancePercent: Integer (Optional)\n                             maxUnhealthyInstancePercent: Integer (Optional)\n                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                             pauseTimeBetweenBatches: Duration (Optional)\n                             prioritizeUnhealthyInstances: Boolean (Optional)\n                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                         }\n                     }\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updateJobWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job. This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     poolInfo (Optional): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                         sharedGalleryImageId: String (Optional)\n                         communityGalleryImageId: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                              (Optional){\n                                 username: String (Optional)\n                                 password: String (Optional)\n                                 registryServer: String (Optional)\n                                 identityReference (Optional): {\n                                     resourceId: String (Optional)\n                                 }\n                             }\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Required)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Required)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                         caching: String(none/readonly/readwrite) (Optional)\n                         diskSizeGB: Integer (Optional)\n                         managedDisk (Optional): {\n                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                             securityProfile (Optional): {\n                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                             }\n                         }\n                         writeAcceleratorEnabled: Boolean (Optional)\n                     }\n                     securityProfile (Optional): {\n                         encryptionAtHost: Boolean (Optional)\n                         securityType: String(trustedLaunch/confidentialVM) (Optional)\n                         uefiSettings (Optional): {\n                             secureBootEnabled: Boolean (Optional)\n                             vTpmEnabled: Boolean (Optional)\n                         }\n                     }\n                     serviceArtifactReference (Optional): {\n                         id: String (Required)\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 resourceTags: String (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): {\n                         containerRunOptions: String (Optional)\n                         imageName: String (Required)\n                         registry (Optional): (recursive schema, see registry above)\n                         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                         containerHostBatchBindMounts (Optional): [\n                              (Optional){\n                                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                                 isReadOnly: Boolean (Optional)\n                             }\n                         ]\n                     }\n                     resourceFiles (Optional): [\n                          (Optional){\n                             autoStorageContainerName: String (Optional)\n                             storageContainerUrl: String (Optional)\n                             httpUrl: String (Optional)\n                             blobPrefix: String (Optional)\n                             filePath: String (Optional)\n                             fileMode: String (Optional)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                     ]\n                     environmentSettings (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                     userIdentity (Optional): {\n                         username: String (Optional)\n                         autoUser (Optional): {\n                             scope: String(task/pool) (Optional)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                         }\n                     }\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 certificateReferences (Optional): [\n                      (Optional){\n                         thumbprint: String (Required)\n                         thumbprintAlgorithm: String (Required)\n                         storeLocation: String(currentuser/localmachine) (Optional)\n                         storeName: String (Optional)\n                         visibility (Optional): [\n                             String(starttask/task/remoteuser) (Optional)\n                         ]\n                     }\n                 ]\n                 applicationPackageReferences (Optional): [\n                      (Optional){\n                         applicationId: String (Required)\n                         version: String (Optional)\n                     }\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             accountKey: String (Required)\n                             azureFileUrl: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 upgradePolicy (Optional): {\n                     mode: String(automatic/manual/rolling) (Required)\n                     automaticOSUpgradePolicy (Optional): {\n                         disableAutomaticRollback: Boolean (Optional)\n                         enableAutomaticOSUpgrade: Boolean (Optional)\n                         useRollingUpgradePolicy: Boolean (Optional)\n                         osRollingUpgradeDeferral: Boolean (Optional)\n                     }\n                     rollingUpgradePolicy (Optional): {\n                         enableCrossZoneUpgrade: Boolean (Optional)\n                         maxBatchInstancePercent: Integer (Optional)\n                         maxUnhealthyInstancePercent: Integer (Optional)\n                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n                         pauseTimeBetweenBatches: Duration (Optional)\n                         prioritizeUnhealthyInstances: Boolean (Optional)\n                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n                     }\n                 }\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n         skipWithdrawFromVNet: Boolean (Optional)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updatePool(java.lang.String,com.azure.compute.batch.models.BatchPoolUpdateParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updatePool(String poolId, BatchPoolUpdateParameters pool)"
  name: "updatePool(String poolId, BatchPoolUpdateParameters pool)"
  nameWithType: "BatchAsyncClient.updatePool(String poolId, BatchPoolUpdateParameters pool)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUpdateParameters?alt=com.azure.compute.batch.models.BatchPoolUpdateParameters&text=BatchPoolUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updatePool(String poolId, BatchPoolUpdateParameters pool)"
  desc: "Updates the properties of the specified Pool. This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updatePool(java.lang.String,com.azure.compute.batch.models.BatchPoolUpdateParameters,com.azure.compute.batch.models.BatchPoolUpdateOptions,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updatePool(String poolId, BatchPoolUpdateParameters pool, BatchPoolUpdateOptions options, RequestConditions requestConditions)"
  name: "updatePool(String poolId, BatchPoolUpdateParameters pool, BatchPoolUpdateOptions options, RequestConditions requestConditions)"
  nameWithType: "BatchAsyncClient.updatePool(String poolId, BatchPoolUpdateParameters pool, BatchPoolUpdateOptions options, RequestConditions requestConditions)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "pool"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUpdateParameters?alt=com.azure.compute.batch.models.BatchPoolUpdateParameters&text=BatchPoolUpdateParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Update Pool operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUpdateOptions?alt=com.azure.compute.batch.models.BatchPoolUpdateOptions&text=BatchPoolUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies HTTP options for conditional requests based on modification time."
    name: "requestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updatePool(String poolId, BatchPoolUpdateParameters pool, BatchPoolUpdateOptions options, RequestConditions requestConditions)"
  desc: "Updates the properties of the specified Pool. This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.updatePoolWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  name: "updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Pool. This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | If-Modified-Since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | If-Unmodified-Since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n    | If-Match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | If-None-Match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     displayName: String (Optional)\n     vmSize: String (Optional)\n     enableInterNodeCommunication: Boolean (Optional)\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             containerHostBatchBindMounts (Optional): [\n                  (Optional){\n                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)\n                     isReadOnly: Boolean (Optional)\n                 }\n             ]\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     certificateReferences (Optional): [\n          (Optional){\n             thumbprint: String (Required)\n             thumbprintAlgorithm: String (Required)\n             storeLocation: String(currentuser/localmachine) (Optional)\n             storeName: String (Optional)\n             visibility (Optional): [\n                 String(starttask/task/remoteuser) (Optional)\n             ]\n         }\n     ]\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n             sharedGalleryImageId: String (Optional)\n             communityGalleryImageId: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Required)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Required)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n             caching: String(none/readonly/readwrite) (Optional)\n             diskSizeGB: Integer (Optional)\n             managedDisk (Optional): {\n                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)\n                 securityProfile (Optional): {\n                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)\n                 }\n             }\n             writeAcceleratorEnabled: Boolean (Optional)\n         }\n         securityProfile (Optional): {\n             encryptionAtHost: Boolean (Optional)\n             securityType: String(trustedLaunch/confidentialVM) (Optional)\n             uefiSettings (Optional): {\n                 secureBootEnabled: Boolean (Optional)\n                 vTpmEnabled: Boolean (Optional)\n             }\n         }\n         serviceArtifactReference (Optional): {\n             id: String (Required)\n         }\n     }\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     resourceTags (Optional): {\n         String: String (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 accountKey: String (Required)\n                 azureFileUrl: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     upgradePolicy (Optional): {\n         mode: String(automatic/manual/rolling) (Required)\n         automaticOSUpgradePolicy (Optional): {\n             disableAutomaticRollback: Boolean (Optional)\n             enableAutomaticOSUpgrade: Boolean (Optional)\n             useRollingUpgradePolicy: Boolean (Optional)\n             osRollingUpgradeDeferral: Boolean (Optional)\n         }\n         rollingUpgradePolicy (Optional): {\n             enableCrossZoneUpgrade: Boolean (Optional)\n             maxBatchInstancePercent: Integer (Optional)\n             maxUnhealthyInstancePercent: Integer (Optional)\n             maxUnhealthyUpgradedInstancePercent: Integer (Optional)\n             pauseTimeBetweenBatches: Duration (Optional)\n             prioritizeUnhealthyInstances: Boolean (Optional)\n             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogs(java.lang.String,java.lang.String,com.azure.compute.batch.models.UploadBatchServiceLogsParameters)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters)"
  name: "uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters)"
  nameWithType: "BatchAsyncClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop\n Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsParameters?alt=com.azure.compute.batch.models.UploadBatchServiceLogsParameters&text=UploadBatchServiceLogsParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UploadBatchServiceLogsResult> uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsResult?alt=com.azure.compute.batch.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogs(java.lang.String,java.lang.String,com.azure.compute.batch.models.UploadBatchServiceLogsParameters,com.azure.compute.batch.models.BatchNodeLogsUploadOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters, BatchNodeLogsUploadOptions options)"
  name: "uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters, BatchNodeLogsUploadOptions options)"
  nameWithType: "BatchAsyncClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters, BatchNodeLogsUploadOptions options)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop\n Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "parameters"
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsParameters?alt=com.azure.compute.batch.models.UploadBatchServiceLogsParameters&text=UploadBatchServiceLogsParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameters for Upload Node Logs operation."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeLogsUploadOptions?alt=com.azure.compute.batch.models.BatchNodeLogsUploadOptions&text=BatchNodeLogsUploadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UploadBatchServiceLogsResult> uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsParameters parameters, BatchNodeLogsUploadOptions options)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsResult?alt=com.azure.compute.batch.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogsWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchAsyncClient.uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  name: "uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchAsyncClient.uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop\n Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.\n\n**Query Parameters**\n\n    | ------- | -------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type     | Required | Description                                                                                                                                                                   |\n    | timeOut | Duration | No       | The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     containerUrl: String (Required)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Optional)\n     identityReference (Optional): {\n         resourceId: String (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     virtualDirectoryName: String (Required)\n     numberOfFilesUploaded: int (Required)\n }\n```"
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>\n on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous BatchClient type."
metadata: {}
package: "com.azure.compute.batch"
artifact: com.azure:azure-compute-batch:1.0.0-beta.5
